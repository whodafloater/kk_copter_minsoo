
XXcontrol_KR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000011a6  0000123a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800102  00800102  0000123c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003b4  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000932  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000227  00000000  00000000  00001f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e47  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000205  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_1>
       8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_2>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ea       	ldi	r30, 0xA6	; 166
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 36       	cpi	r26, 0x6D	; 109
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <main>
      9e:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
void delay_ms(uint16_t time);


// RX_ROLL
ISR(PCINT2_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
	if ( RX_ROLL )			// rising
      b8:	49 9b       	sbis	0x09, 1	; 9
      ba:	09 c0       	rjmp	.+18     	; 0xce <__vector_5+0x28>
	{
		RxChannel1Start = TCNT1;
      bc:	80 91 84 00 	lds	r24, 0x0084
      c0:	90 91 85 00 	lds	r25, 0x0085
      c4:	90 93 48 01 	sts	0x0148, r25
      c8:	80 93 47 01 	sts	0x0147, r24
      cc:	18 c0       	rjmp	.+48     	; 0xfe <__vector_5+0x58>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	90 93 5a 01 	sts	0x015A, r25
      d6:	80 93 59 01 	sts	0x0159, r24
		RxChannel1 = TCNT1 - RxChannel1Start;
      da:	80 91 84 00 	lds	r24, 0x0084
      de:	90 91 85 00 	lds	r25, 0x0085
      e2:	20 91 47 01 	lds	r18, 0x0147
      e6:	30 91 48 01 	lds	r19, 0x0148
      ea:	82 1b       	sub	r24, r18
      ec:	93 0b       	sbc	r25, r19
      ee:	90 93 5e 01 	sts	0x015E, r25
      f2:	80 93 5d 01 	sts	0x015D, r24
		RxChannelsUpdatingFlag = 0;
      f6:	10 92 5a 01 	sts	0x015A, r1
      fa:	10 92 59 01 	sts	0x0159, r1
	}
}
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	3f 91       	pop	r19
     104:	2f 91       	pop	r18
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <__vector_1>:

// RX_PITCH
ISR(INT0_vect)
{
     110:	1f 92       	push	r1
     112:	0f 92       	push	r0
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	0f 92       	push	r0
     118:	11 24       	eor	r1, r1
     11a:	2f 93       	push	r18
     11c:	3f 93       	push	r19
     11e:	8f 93       	push	r24
     120:	9f 93       	push	r25
	if (RX_PITCH)		
     122:	4a 9b       	sbis	0x09, 2	; 9
     124:	09 c0       	rjmp	.+18     	; 0x138 <__vector_1+0x28>
	{
		RxChannel2Start = TCNT1;
     126:	80 91 84 00 	lds	r24, 0x0084
     12a:	90 91 85 00 	lds	r25, 0x0085
     12e:	90 93 27 01 	sts	0x0127, r25
     132:	80 93 26 01 	sts	0x0126, r24
     136:	18 c0       	rjmp	.+48     	; 0x168 <__vector_1+0x58>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	90 93 5a 01 	sts	0x015A, r25
     140:	80 93 59 01 	sts	0x0159, r24
		RxChannel2 = TCNT1 - RxChannel2Start;
     144:	80 91 84 00 	lds	r24, 0x0084
     148:	90 91 85 00 	lds	r25, 0x0085
     14c:	20 91 26 01 	lds	r18, 0x0126
     150:	30 91 27 01 	lds	r19, 0x0127
     154:	82 1b       	sub	r24, r18
     156:	93 0b       	sbc	r25, r19
     158:	90 93 3d 01 	sts	0x013D, r25
     15c:	80 93 3c 01 	sts	0x013C, r24
		RxChannelsUpdatingFlag = 0;
     160:	10 92 5a 01 	sts	0x015A, r1
     164:	10 92 59 01 	sts	0x0159, r1
	}
}
     168:	9f 91       	pop	r25
     16a:	8f 91       	pop	r24
     16c:	3f 91       	pop	r19
     16e:	2f 91       	pop	r18
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <__vector_2>:

// RX_COLL
ISR(INT1_vect)
{
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
	if (RX_COLL)		
     18c:	4b 9b       	sbis	0x09, 3	; 9
     18e:	09 c0       	rjmp	.+18     	; 0x1a2 <__vector_2+0x28>
	{
		RxChannel3Start = TCNT1;
     190:	80 91 84 00 	lds	r24, 0x0084
     194:	90 91 85 00 	lds	r25, 0x0085
     198:	90 93 33 01 	sts	0x0133, r25
     19c:	80 93 32 01 	sts	0x0132, r24
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__vector_2+0x58>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	90 93 5a 01 	sts	0x015A, r25
     1aa:	80 93 59 01 	sts	0x0159, r24
		RxChannel3 = TCNT1 - RxChannel3Start;
     1ae:	80 91 84 00 	lds	r24, 0x0084
     1b2:	90 91 85 00 	lds	r25, 0x0085
     1b6:	20 91 32 01 	lds	r18, 0x0132
     1ba:	30 91 33 01 	lds	r19, 0x0133
     1be:	82 1b       	sub	r24, r18
     1c0:	93 0b       	sbc	r25, r19
     1c2:	90 93 52 01 	sts	0x0152, r25
     1c6:	80 93 51 01 	sts	0x0151, r24
		RxChannelsUpdatingFlag = 0;
     1ca:	10 92 5a 01 	sts	0x015A, r1
     1ce:	10 92 59 01 	sts	0x0159, r1
	}
}
     1d2:	9f 91       	pop	r25
     1d4:	8f 91       	pop	r24
     1d6:	3f 91       	pop	r19
     1d8:	2f 91       	pop	r18
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <__vector_3>:

// RX_YAW
ISR(PCINT0_vect)
{
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	8f 93       	push	r24
     1f4:	9f 93       	push	r25
	if ( RX_YAW )			// rising
     1f6:	1f 9b       	sbis	0x03, 7	; 3
     1f8:	09 c0       	rjmp	.+18     	; 0x20c <__vector_3+0x28>
	{
		RxChannel4Start = TCNT1;
     1fa:	80 91 84 00 	lds	r24, 0x0084
     1fe:	90 91 85 00 	lds	r25, 0x0085
     202:	90 93 50 01 	sts	0x0150, r25
     206:	80 93 4f 01 	sts	0x014F, r24
     20a:	18 c0       	rjmp	.+48     	; 0x23c <__vector_3+0x58>

	} else {				// falling
		RxChannelsUpdatingFlag = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 5a 01 	sts	0x015A, r25
     214:	80 93 59 01 	sts	0x0159, r24
		RxChannel4 = TCNT1 - RxChannel4Start;
     218:	80 91 84 00 	lds	r24, 0x0084
     21c:	90 91 85 00 	lds	r25, 0x0085
     220:	20 91 4f 01 	lds	r18, 0x014F
     224:	30 91 50 01 	lds	r19, 0x0150
     228:	82 1b       	sub	r24, r18
     22a:	93 0b       	sbc	r25, r19
     22c:	90 93 29 01 	sts	0x0129, r25
     230:	80 93 28 01 	sts	0x0128, r24
		RxChannelsUpdatingFlag = 0;
     234:	10 92 5a 01 	sts	0x015A, r1
     238:	10 92 59 01 	sts	0x0159, r1
	}
}
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	3f 91       	pop	r19
     242:	2f 91       	pop	r18
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <Init_ADC>:
	if (Armed) output_motor_ppm();		// output ESC signal
}

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     24e:	8f e3       	ldi	r24, 0x3F	; 63
     250:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     254:	10 92 7b 00 	sts	0x007B, r1
}
     258:	08 95       	ret

0000025a <ReadGainPots>:
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     260:	86 ec       	ldi	r24, 0xC6	; 198
     262:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     266:	80 91 7a 00 	lds	r24, 0x007A
     26a:	86 fd       	sbrc	r24, 6
     26c:	fc cf       	rjmp	.-8      	; 0x266 <ReadGainPots+0xc>
}

void ReadGainPots(void)
{
	read_adc( 3 );			// read roll gain ADC3
	GainInADC[ROLL] = ADCL;
     26e:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[ROLL] += ((uint16_t) ADCH <<8);
     272:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[ROLL] = 1024 - GainInADC[ROLL];
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	94 e0       	ldi	r25, 0x04	; 4
     27a:	82 1b       	sub	r24, r18
     27c:	91 09       	sbc	r25, r1
     27e:	34 2f       	mov	r19, r20
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	82 1b       	sub	r24, r18
     284:	93 0b       	sbc	r25, r19
     286:	90 93 4a 01 	sts	0x014A, r25
     28a:	80 93 49 01 	sts	0x0149, r24
	GainIn[ROLL] = GainInADC[ROLL] / 10;
     28e:	6a e0       	ldi	r22, 0x0A	; 10
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
     296:	70 93 37 01 	sts	0x0137, r23
     29a:	60 93 36 01 	sts	0x0136, r22
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     29e:	84 e0       	ldi	r24, 0x04	; 4
     2a0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     2a4:	86 ec       	ldi	r24, 0xC6	; 198
     2a6:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     2aa:	80 91 7a 00 	lds	r24, 0x007A
     2ae:	86 fd       	sbrc	r24, 6
     2b0:	fc cf       	rjmp	.-8      	; 0x2aa <ReadGainPots+0x50>
	GainInADC[ROLL] += ((uint16_t) ADCH <<8);
	GainInADC[ROLL] = 1024 - GainInADC[ROLL];
	GainIn[ROLL] = GainInADC[ROLL] / 10;

	read_adc( 4 );			// read pitch gain ADC4
	GainInADC[PITCH] = ADCL;
     2b2:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[PITCH] += ((uint16_t) ADCH <<8);
     2b6:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[PITCH] = 1024 - GainInADC[PITCH];
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	82 1b       	sub	r24, r18
     2c0:	91 09       	sbc	r25, r1
     2c2:	34 2f       	mov	r19, r20
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	82 1b       	sub	r24, r18
     2c8:	93 0b       	sbc	r25, r19
     2ca:	90 93 4c 01 	sts	0x014C, r25
     2ce:	80 93 4b 01 	sts	0x014B, r24
	GainIn[PITCH] = GainInADC[PITCH] / 10;
     2d2:	6a e0       	ldi	r22, 0x0A	; 10
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
     2da:	70 93 39 01 	sts	0x0139, r23
     2de:	60 93 38 01 	sts	0x0138, r22
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     2e8:	86 ec       	ldi	r24, 0xC6	; 198
     2ea:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     2ee:	80 91 7a 00 	lds	r24, 0x007A
     2f2:	86 fd       	sbrc	r24, 6
     2f4:	fc cf       	rjmp	.-8      	; 0x2ee <ReadGainPots+0x94>
	GainInADC[PITCH] += ((uint16_t) ADCH <<8);
	GainInADC[PITCH] = 1024 - GainInADC[PITCH];
	GainIn[PITCH] = GainInADC[PITCH] / 10;

	read_adc( 5 );			// read yaw gain ADC5
	GainInADC[YAW] = ADCL;
     2f6:	20 91 78 00 	lds	r18, 0x0078
	GainInADC[YAW] += ((uint16_t) ADCH <<8);
     2fa:	40 91 79 00 	lds	r20, 0x0079
	GainInADC[YAW] = 1024 - GainInADC[YAW];
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	94 e0       	ldi	r25, 0x04	; 4
     302:	82 1b       	sub	r24, r18
     304:	91 09       	sbc	r25, r1
     306:	34 2f       	mov	r19, r20
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	82 1b       	sub	r24, r18
     30c:	93 0b       	sbc	r25, r19
     30e:	90 93 4e 01 	sts	0x014E, r25
     312:	80 93 4d 01 	sts	0x014D, r24
	GainIn[YAW] = GainInADC[YAW] / 10;
     316:	6a e0       	ldi	r22, 0x0A	; 10
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
     31e:	70 93 3b 01 	sts	0x013B, r23
     322:	60 93 3a 01 	sts	0x013A, r22
}
     326:	08 95       	ret

00000328 <read_adc>:

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     328:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     32c:	86 ec       	ldi	r24, 0xC6	; 198
     32e:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     332:	80 91 7a 00 	lds	r24, 0x007A
     336:	86 fd       	sbrc	r24, 6
     338:	fc cf       	rjmp	.-8      	; 0x332 <read_adc+0xa>
}
     33a:	08 95       	ret

0000033c <ReadGyros>:

void ReadGyros(bool calibrate)
{
     33c:	48 2f       	mov	r20, r24
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     344:	86 ec       	ldi	r24, 0xC6	; 198
     346:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     34a:	80 91 7a 00 	lds	r24, 0x007A
     34e:	86 fd       	sbrc	r24, 6
     350:	fc cf       	rjmp	.-8      	; 0x34a <ReadGyros+0xe>
}

void ReadGyros(bool calibrate)
{
	read_adc( 2 );			// read roll gyro ADC2
	gyroADC[ROLL] = ADCL;
     352:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
     356:	20 91 79 00 	lds	r18, 0x0079
     35a:	92 2f       	mov	r25, r18
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	bc 01       	movw	r22, r24
     360:	63 0f       	add	r22, r19
     362:	71 1d       	adc	r23, r1
     364:	9b 01       	movw	r18, r22
     366:	70 93 1e 01 	sts	0x011E, r23
     36a:	60 93 1d 01 	sts	0x011D, r22
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output
     36e:	44 23       	and	r20, r20
     370:	51 f4       	brne	.+20     	; 0x386 <ReadGyros+0x4a>
     372:	80 91 04 01 	lds	r24, 0x0104
     376:	90 91 05 01 	lds	r25, 0x0105
     37a:	28 1b       	sub	r18, r24
     37c:	39 0b       	sbc	r19, r25
     37e:	30 93 1e 01 	sts	0x011E, r19
     382:	20 93 1d 01 	sts	0x011D, r18
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     38c:	86 ec       	ldi	r24, 0xC6	; 198
     38e:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     392:	80 91 7a 00 	lds	r24, 0x007A
     396:	86 fd       	sbrc	r24, 6
     398:	fc cf       	rjmp	.-8      	; 0x392 <ReadGyros+0x56>
	gyroADC[ROLL] = ADCL;
	gyroADC[ROLL] += ((uint16_t) ADCH <<8);
	if (!calibrate) gyroADC[ROLL] 	-= gyroZero[ROLL];				//remove offset from gyro output

	read_adc( 1 );			// read pitch gyro ADC1
	gyroADC[PITCH] = ADCL;
     39a:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[PITCH] += ((uint16_t) ADCH <<8);
     39e:	20 91 79 00 	lds	r18, 0x0079
     3a2:	92 2f       	mov	r25, r18
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	bc 01       	movw	r22, r24
     3a8:	63 0f       	add	r22, r19
     3aa:	71 1d       	adc	r23, r1
     3ac:	9b 01       	movw	r18, r22
     3ae:	70 93 20 01 	sts	0x0120, r23
     3b2:	60 93 1f 01 	sts	0x011F, r22
	if (!calibrate) gyroADC[PITCH] -= gyroZero[PITCH];				//remove offset from gyro output
     3b6:	44 23       	and	r20, r20
     3b8:	51 f4       	brne	.+20     	; 0x3ce <ReadGyros+0x92>
     3ba:	80 91 06 01 	lds	r24, 0x0106
     3be:	90 91 07 01 	lds	r25, 0x0107
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	30 93 20 01 	sts	0x0120, r19
     3ca:	20 93 1f 01 	sts	0x011F, r18
	GainIn[YAW] = GainInADC[YAW] / 10;
}

void read_adc(uint8_t channel)
{
	ADMUX 	= channel;						// set channel
     3ce:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA 	= 0b11000110;					// ADEN, ADSC, ADPS1,2
     3d2:	86 ec       	ldi	r24, 0xC6	; 198
     3d4:	80 93 7a 00 	sts	0x007A, r24

	while (ADCSRA & (1 << ADSC));	// wait to complete
     3d8:	80 91 7a 00 	lds	r24, 0x007A
     3dc:	86 fd       	sbrc	r24, 6
     3de:	fc cf       	rjmp	.-8      	; 0x3d8 <ReadGyros+0x9c>

#ifdef EXTERNAL_YAW_GYRO
	gyroADC[YAW] = 0;
#else
	read_adc( 0 );			// read yaw gyro ADC0
	gyroADC[YAW] = ADCL;
     3e0:	30 91 78 00 	lds	r19, 0x0078
	gyroADC[YAW] += ((uint16_t) ADCH <<8);
     3e4:	20 91 79 00 	lds	r18, 0x0079
     3e8:	92 2f       	mov	r25, r18
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	bc 01       	movw	r22, r24
     3ee:	63 0f       	add	r22, r19
     3f0:	71 1d       	adc	r23, r1
     3f2:	9b 01       	movw	r18, r22
     3f4:	70 93 22 01 	sts	0x0122, r23
     3f8:	60 93 21 01 	sts	0x0121, r22
	if (!calibrate) gyroADC[YAW]	-= gyroZero[YAW];				//remove offset from gyro output
     3fc:	44 23       	and	r20, r20
     3fe:	51 f4       	brne	.+20     	; 0x414 <ReadGyros+0xd8>
     400:	80 91 08 01 	lds	r24, 0x0108
     404:	90 91 09 01 	lds	r25, 0x0109
     408:	28 1b       	sub	r18, r24
     40a:	39 0b       	sbc	r19, r25
     40c:	30 93 22 01 	sts	0x0122, r19
     410:	20 93 21 01 	sts	0x0121, r18
     414:	08 95       	ret

00000416 <CalibrateGyros>:
#endif
}

void CalibrateGyros(void)
{
     416:	1f 93       	push	r17
	uint8_t i;

	ReadGainPots();	// about time we did this !
     418:	0e 94 2d 01 	call	0x25a	; 0x25a <ReadGainPots>

	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
     41c:	10 92 05 01 	sts	0x0105, r1
     420:	10 92 04 01 	sts	0x0104, r1
	gyroZero[PITCH] = 0;	
     424:	10 92 07 01 	sts	0x0107, r1
     428:	10 92 06 01 	sts	0x0106, r1
	gyroZero[YAW] 	= 0;
     42c:	10 92 09 01 	sts	0x0109, r1
     430:	10 92 08 01 	sts	0x0108, r1
     434:	10 e0       	ldi	r17, 0x00	; 0

	for (i=0;i<32;i++)
	{
		ReadGyros(true);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 9e 01 	call	0x33c	; 0x33c <ReadGyros>
	
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
     43c:	60 91 04 01 	lds	r22, 0x0104
     440:	70 91 05 01 	lds	r23, 0x0105
     444:	80 91 1d 01 	lds	r24, 0x011D
     448:	90 91 1e 01 	lds	r25, 0x011E
     44c:	68 0f       	add	r22, r24
     44e:	79 1f       	adc	r23, r25
     450:	70 93 05 01 	sts	0x0105, r23
     454:	60 93 04 01 	sts	0x0104, r22
		gyroZero[PITCH] += gyroADC[PITCH];	
     458:	40 91 06 01 	lds	r20, 0x0106
     45c:	50 91 07 01 	lds	r21, 0x0107
     460:	80 91 1f 01 	lds	r24, 0x011F
     464:	90 91 20 01 	lds	r25, 0x0120
     468:	48 0f       	add	r20, r24
     46a:	59 1f       	adc	r21, r25
     46c:	50 93 07 01 	sts	0x0107, r21
     470:	40 93 06 01 	sts	0x0106, r20
		gyroZero[YAW] 	+= gyroADC[YAW];
     474:	20 91 08 01 	lds	r18, 0x0108
     478:	30 91 09 01 	lds	r19, 0x0109
     47c:	80 91 21 01 	lds	r24, 0x0121
     480:	90 91 22 01 	lds	r25, 0x0122
     484:	28 0f       	add	r18, r24
     486:	39 1f       	adc	r19, r25
     488:	30 93 09 01 	sts	0x0109, r19
     48c:	20 93 08 01 	sts	0x0108, r18
	// get/set gyro zero value (average of 32 readings)
	gyroZero[ROLL] 	= 0;						
	gyroZero[PITCH] = 0;	
	gyroZero[YAW] 	= 0;

	for (i=0;i<32;i++)
     490:	1f 5f       	subi	r17, 0xFF	; 255
     492:	10 32       	cpi	r17, 0x20	; 32
     494:	81 f6       	brne	.-96     	; 0x436 <CalibrateGyros+0x20>
		gyroZero[ROLL] 	+= gyroADC[ROLL];						
		gyroZero[PITCH] += gyroADC[PITCH];	
		gyroZero[YAW] 	+= gyroADC[YAW];
	}

	gyroZero[ROLL] 	= (gyroZero[ROLL] >> 5);						
     496:	e5 e0       	ldi	r30, 0x05	; 5
     498:	75 95       	asr	r23
     49a:	67 95       	ror	r22
     49c:	ea 95       	dec	r30
     49e:	e1 f7       	brne	.-8      	; 0x498 <CalibrateGyros+0x82>
     4a0:	70 93 05 01 	sts	0x0105, r23
     4a4:	60 93 04 01 	sts	0x0104, r22
	gyroZero[PITCH] = (gyroZero[PITCH] >> 5);
     4a8:	95 e0       	ldi	r25, 0x05	; 5
     4aa:	55 95       	asr	r21
     4ac:	47 95       	ror	r20
     4ae:	9a 95       	dec	r25
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <CalibrateGyros+0x94>
     4b2:	50 93 07 01 	sts	0x0107, r21
     4b6:	40 93 06 01 	sts	0x0106, r20
	gyroZero[YAW] 	= (gyroZero[YAW] >> 5);
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	35 95       	asr	r19
     4be:	27 95       	ror	r18
     4c0:	8a 95       	dec	r24
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <CalibrateGyros+0xa6>
     4c4:	30 93 09 01 	sts	0x0109, r19
     4c8:	20 93 08 01 	sts	0x0108, r18

	GyroCalibrated = true;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	80 93 25 01 	sts	0x0125, r24
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
	LowpassOutServo[ROLL]	= 84;					// Center
     4d2:	84 e5       	ldi	r24, 0x54	; 84
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	90 93 54 01 	sts	0x0154, r25
     4da:	80 93 53 01 	sts	0x0153, r24
	LowpassOutServo[PITCH]	= 84;					// Center
     4de:	90 93 56 01 	sts	0x0156, r25
     4e2:	80 93 55 01 	sts	0x0155, r24
	LowpassOutServo[YAW]	= 84;					// Center
     4e6:	90 93 58 01 	sts	0x0158, r25
     4ea:	80 93 57 01 	sts	0x0157, r24
	LowpassOutServo[0]		= 50;					// Center
	LowpassOutServo[1]		= 50;					// Center
#elif defined(TRI_COPTER)
	LowpassOutYaw			= 50;					// Center
#endif
}
     4ee:	1f 91       	pop	r17
     4f0:	08 95       	ret

000004f2 <RxGetChannels>:
//--- Get and scale RX channel inputs ---
void RxGetChannels(void)
{
	static int16_t RxChannel;

	while ( RxChannelsUpdatingFlag );
     4f2:	80 91 59 01 	lds	r24, 0x0159
     4f6:	90 91 5a 01 	lds	r25, 0x015A
     4fa:	89 2b       	or	r24, r25
     4fc:	d1 f7       	brne	.-12     	; 0x4f2 <RxGetChannels>

	RxChannel = RxChannel1;
     4fe:	80 91 5d 01 	lds	r24, 0x015D
     502:	90 91 5e 01 	lds	r25, 0x015E
	RxChannel -= Config.RxChannel1ZeroOffset;				// normalise
	RxInRoll = (RxChannel >> 2);                    //     "
     506:	20 91 65 01 	lds	r18, 0x0165
     50a:	30 91 66 01 	lds	r19, 0x0166
     50e:	82 1b       	sub	r24, r18
     510:	93 0b       	sbc	r25, r19
     512:	95 95       	asr	r25
     514:	87 95       	ror	r24
     516:	95 95       	asr	r25
     518:	87 95       	ror	r24
     51a:	90 93 2b 01 	sts	0x012B, r25
     51e:	80 93 2a 01 	sts	0x012A, r24

	while ( RxChannelsUpdatingFlag );
     522:	80 91 59 01 	lds	r24, 0x0159
     526:	90 91 5a 01 	lds	r25, 0x015A
     52a:	89 2b       	or	r24, r25
     52c:	d1 f7       	brne	.-12     	; 0x522 <RxGetChannels+0x30>

	RxChannel = RxChannel2;
     52e:	80 91 3c 01 	lds	r24, 0x013C
     532:	90 91 3d 01 	lds	r25, 0x013D
	RxChannel -= Config.RxChannel2ZeroOffset;				// normalise
	RxInPitch = (RxChannel >> 2);                   //     "
     536:	20 91 67 01 	lds	r18, 0x0167
     53a:	30 91 68 01 	lds	r19, 0x0168
     53e:	82 1b       	sub	r24, r18
     540:	93 0b       	sbc	r25, r19
     542:	95 95       	asr	r25
     544:	87 95       	ror	r24
     546:	95 95       	asr	r25
     548:	87 95       	ror	r24
     54a:	90 93 45 01 	sts	0x0145, r25
     54e:	80 93 44 01 	sts	0x0144, r24

	while ( RxChannelsUpdatingFlag );
     552:	80 91 59 01 	lds	r24, 0x0159
     556:	90 91 5a 01 	lds	r25, 0x015A
     55a:	89 2b       	or	r24, r25
     55c:	d1 f7       	brne	.-12     	; 0x552 <RxGetChannels+0x60>

	RxChannel = RxChannel3;
     55e:	80 91 51 01 	lds	r24, 0x0151
     562:	90 91 52 01 	lds	r25, 0x0152
	RxChannel -= Config.RxChannel3ZeroOffset;				// scale 0->100
	RxInCollective = (RxChannel >> 3);              // 
     566:	20 91 69 01 	lds	r18, 0x0169
     56a:	30 91 6a 01 	lds	r19, 0x016A
     56e:	82 1b       	sub	r24, r18
     570:	93 0b       	sbc	r25, r19
     572:	a3 e0       	ldi	r26, 0x03	; 3
     574:	95 95       	asr	r25
     576:	87 95       	ror	r24
     578:	aa 95       	dec	r26
     57a:	e1 f7       	brne	.-8      	; 0x574 <RxGetChannels+0x82>
     57c:	90 93 1c 01 	sts	0x011C, r25
     580:	80 93 1b 01 	sts	0x011B, r24

	while ( RxChannelsUpdatingFlag );
     584:	80 91 59 01 	lds	r24, 0x0159
     588:	90 91 5a 01 	lds	r25, 0x015A
     58c:	89 2b       	or	r24, r25
     58e:	d1 f7       	brne	.-12     	; 0x584 <RxGetChannels+0x92>

	RxChannel = RxChannel4;
     590:	80 91 28 01 	lds	r24, 0x0128
     594:	90 91 29 01 	lds	r25, 0x0129
	RxChannel -= Config.RxChannel4ZeroOffset;				// normalise
     598:	20 91 6b 01 	lds	r18, 0x016B
     59c:	30 91 6c 01 	lds	r19, 0x016C
     5a0:	82 1b       	sub	r24, r18
     5a2:	93 0b       	sbc	r25, r19
     5a4:	90 93 17 01 	sts	0x0117, r25
     5a8:	80 93 16 01 	sts	0x0116, r24
	RxInYaw = (RxChannel >> 2);                     //     "
     5ac:	95 95       	asr	r25
     5ae:	87 95       	ror	r24
     5b0:	95 95       	asr	r25
     5b2:	87 95       	ror	r24
     5b4:	90 93 2d 01 	sts	0x012D, r25
     5b8:	80 93 2c 01 	sts	0x012C, r24

#ifdef TWIN_COPTER
	RxInOrgPitch = RxInPitch;
#endif
}
     5bc:	08 95       	ret

000005be <output_motor_ppm>:
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE) || defined(DUAL_COPTER) || defined(TWIN_COPTER) || defined(TRI_COPTER)
	static uint8_t ServoPPMRateCount;
#endif

	// if ESC's are high, we need to turn them off
	if (output_motor_high)
     5be:	80 91 0a 01 	lds	r24, 0x010A
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <output_motor_ppm+0xa>
     5c6:	f8 c0       	rjmp	.+496    	; 0x7b8 <output_motor_ppm+0x1fa>
	{
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
		// set motor limits (0 -> 100)
		// set servo limits (0 -> 200)
		if ( MotorOut1 < 0 ) MotorOut1 = 0;
     5c8:	80 91 23 01 	lds	r24, 0x0123
     5cc:	90 91 24 01 	lds	r25, 0x0124
     5d0:	97 ff       	sbrs	r25, 7
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <output_motor_ppm+0x20>
     5d4:	10 92 24 01 	sts	0x0124, r1
     5d8:	10 92 23 01 	sts	0x0123, r1
     5dc:	09 c0       	rjmp	.+18     	; 0x5f0 <output_motor_ppm+0x32>
		else if ( MotorOut1 > 100 ) MotorOut1 = 100;
     5de:	85 36       	cpi	r24, 0x65	; 101
     5e0:	91 05       	cpc	r25, r1
     5e2:	34 f0       	brlt	.+12     	; 0x5f0 <output_motor_ppm+0x32>
     5e4:	84 e6       	ldi	r24, 0x64	; 100
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	90 93 24 01 	sts	0x0124, r25
     5ec:	80 93 23 01 	sts	0x0123, r24
		if ( MotorOut2 < 0 ) MotorOut2 = 0;
     5f0:	80 91 2e 01 	lds	r24, 0x012E
     5f4:	90 91 2f 01 	lds	r25, 0x012F
     5f8:	97 ff       	sbrs	r25, 7
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <output_motor_ppm+0x48>
     5fc:	10 92 2f 01 	sts	0x012F, r1
     600:	10 92 2e 01 	sts	0x012E, r1
     604:	09 c0       	rjmp	.+18     	; 0x618 <output_motor_ppm+0x5a>
		else if ( MotorOut2 > 200 ) MotorOut2 = 200;
     606:	89 3c       	cpi	r24, 0xC9	; 201
     608:	91 05       	cpc	r25, r1
     60a:	34 f0       	brlt	.+12     	; 0x618 <output_motor_ppm+0x5a>
     60c:	88 ec       	ldi	r24, 0xC8	; 200
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 2f 01 	sts	0x012F, r25
     614:	80 93 2e 01 	sts	0x012E, r24
		if ( MotorOut3 < 0 ) MotorOut3 = 0;
     618:	80 91 40 01 	lds	r24, 0x0140
     61c:	90 91 41 01 	lds	r25, 0x0141
     620:	97 ff       	sbrs	r25, 7
     622:	05 c0       	rjmp	.+10     	; 0x62e <output_motor_ppm+0x70>
     624:	10 92 41 01 	sts	0x0141, r1
     628:	10 92 40 01 	sts	0x0140, r1
     62c:	09 c0       	rjmp	.+18     	; 0x640 <output_motor_ppm+0x82>
		else if ( MotorOut3 > 200 ) MotorOut3 = 200;
     62e:	89 3c       	cpi	r24, 0xC9	; 201
     630:	91 05       	cpc	r25, r1
     632:	34 f0       	brlt	.+12     	; 0x640 <output_motor_ppm+0x82>
     634:	88 ec       	ldi	r24, 0xC8	; 200
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 41 01 	sts	0x0141, r25
     63c:	80 93 40 01 	sts	0x0140, r24
		if ( MotorOut4 < 0 ) MotorOut4 = 0;
     640:	80 91 34 01 	lds	r24, 0x0134
     644:	90 91 35 01 	lds	r25, 0x0135
     648:	97 ff       	sbrs	r25, 7
     64a:	05 c0       	rjmp	.+10     	; 0x656 <output_motor_ppm+0x98>
     64c:	10 92 35 01 	sts	0x0135, r1
     650:	10 92 34 01 	sts	0x0134, r1
     654:	09 c0       	rjmp	.+18     	; 0x668 <output_motor_ppm+0xaa>
		else if ( MotorOut4 > 200 ) MotorOut4 = 200;
     656:	89 3c       	cpi	r24, 0xC9	; 201
     658:	91 05       	cpc	r25, r1
     65a:	34 f0       	brlt	.+12     	; 0x668 <output_motor_ppm+0xaa>
     65c:	88 ec       	ldi	r24, 0xC8	; 200
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 35 01 	sts	0x0135, r25
     664:	80 93 34 01 	sts	0x0134, r24
		if ( MotorOut5 < 0 ) MotorOut5 = 0;
     668:	80 91 5b 01 	lds	r24, 0x015B
     66c:	90 91 5c 01 	lds	r25, 0x015C
     670:	97 ff       	sbrs	r25, 7
     672:	05 c0       	rjmp	.+10     	; 0x67e <output_motor_ppm+0xc0>
     674:	10 92 5c 01 	sts	0x015C, r1
     678:	10 92 5b 01 	sts	0x015B, r1
     67c:	09 c0       	rjmp	.+18     	; 0x690 <output_motor_ppm+0xd2>
		else if ( MotorOut5 > 200 ) MotorOut5 = 200;
     67e:	89 3c       	cpi	r24, 0xC9	; 201
     680:	91 05       	cpc	r25, r1
     682:	34 f0       	brlt	.+12     	; 0x690 <output_motor_ppm+0xd2>
     684:	88 ec       	ldi	r24, 0xC8	; 200
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	90 93 5c 01 	sts	0x015C, r25
     68c:	80 93 5b 01 	sts	0x015B, r24
		else if ( MotorOut6 > 100 ) MotorOut6 = 100;
	#endif
#endif

		// now calculate the time already passed that Motors were HIGH
		ElapsedTCNT1 = (TCNT1 - MotorStartTCNT1);
     690:	80 91 84 00 	lds	r24, 0x0084
     694:	90 91 85 00 	lds	r25, 0x0085
     698:	20 91 13 01 	lds	r18, 0x0113
     69c:	30 91 14 01 	lds	r19, 0x0114
     6a0:	82 1b       	sub	r24, r18
     6a2:	93 0b       	sbc	r25, r19
     6a4:	90 93 12 01 	sts	0x0112, r25
     6a8:	80 93 11 01 	sts	0x0111, r24

		// start output timer
		TIFR0 &= ~(1 << TOV0);			// clr overflow
     6ac:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     6ae:	16 bc       	out	0x26, r1	; 38

		// convert into 10uS intervals
		num_of_10uS = (ElapsedTCNT1 / 10) + 1;
     6b0:	6a e0       	ldi	r22, 0x0A	; 10
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
     6b8:	6f 5f       	subi	r22, 0xFF	; 255
     6ba:	60 93 0c 01 	sts	0x010C, r22
		MotorAdjust = 100 - num_of_10uS;
     6be:	77 27       	eor	r23, r23
     6c0:	67 fd       	sbrc	r22, 7
     6c2:	70 95       	com	r23
     6c4:	84 e6       	ldi	r24, 0x64	; 100
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	86 1b       	sub	r24, r22
     6ca:	97 0b       	sbc	r25, r23
     6cc:	90 93 10 01 	sts	0x0110, r25
     6d0:	80 93 0f 01 	sts	0x010F, r24

#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
		// add adjustment (1mS - time already gone) to 1 channel
		MotorOut1 += MotorAdjust;
     6d4:	20 91 23 01 	lds	r18, 0x0123
     6d8:	30 91 24 01 	lds	r19, 0x0124
     6dc:	28 0f       	add	r18, r24
     6de:	39 1f       	adc	r19, r25
		// Pulse len = 1   -> 2    mS

		// Servo = 0 - 200
		// Pulse len = 0 -> 2.3ms

		TIFR0 &= ~(1 << TOV0);			// clr overflow
     6e0:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;						// reset counter
     6e2:	16 bc       	out	0x26, r1	; 38
     6e4:	a0 91 2e 01 	lds	r26, 0x012E
     6e8:	b0 91 2f 01 	lds	r27, 0x012F
     6ec:	e0 91 40 01 	lds	r30, 0x0140
     6f0:	f0 91 41 01 	lds	r31, 0x0141
     6f4:	60 91 34 01 	lds	r22, 0x0134
     6f8:	70 91 35 01 	lds	r23, 0x0135
     6fc:	40 91 5b 01 	lds	r20, 0x015B
     700:	50 91 5c 01 	lds	r21, 0x015C
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	26 c0       	rjmp	.+76     	; 0x754 <output_motor_ppm+0x196>

#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
		for (i=0;i<200;i++)	
		{
			while (TCNT0 < 80);			// 10uS @ 8MHz = 80 // 10 @ 1MHz = 10uS
     708:	86 b5       	in	r24, 0x26	; 38
     70a:	80 35       	cpi	r24, 0x50	; 80
     70c:	e8 f3       	brcs	.-6      	; 0x708 <output_motor_ppm+0x14a>
			TCNT0 -= 80;
     70e:	86 b5       	in	r24, 0x26	; 38
     710:	80 55       	subi	r24, 0x50	; 80
     712:	86 bd       	out	0x26, r24	; 38

			if (MotorOut1)
     714:	21 15       	cp	r18, r1
     716:	31 05       	cpc	r19, r1
     718:	21 f0       	breq	.+8      	; 0x722 <output_motor_ppm+0x164>
			{
				MotorOut1--;
     71a:	21 50       	subi	r18, 0x01	; 1
     71c:	30 40       	sbci	r19, 0x00	; 0
				if (MotorOut1==0) M1 = 0;
     71e:	09 f4       	brne	.+2      	; 0x722 <output_motor_ppm+0x164>
     720:	2a 98       	cbi	0x05, 2	; 5
			}
			if (MotorOut2) 
     722:	10 97       	sbiw	r26, 0x00	; 0
     724:	19 f0       	breq	.+6      	; 0x72c <output_motor_ppm+0x16e>
			{
				MotorOut2--;
     726:	11 97       	sbiw	r26, 0x01	; 1
				if (MotorOut2==0) M2 = 0;
     728:	09 f4       	brne	.+2      	; 0x72c <output_motor_ppm+0x16e>
     72a:	29 98       	cbi	0x05, 1	; 5
			}
			if (MotorOut3) 
     72c:	30 97       	sbiw	r30, 0x00	; 0
     72e:	19 f0       	breq	.+6      	; 0x736 <output_motor_ppm+0x178>
			{
				MotorOut3--;
     730:	31 97       	sbiw	r30, 0x01	; 1
				if (MotorOut3==0) M3 = 0;
     732:	09 f4       	brne	.+2      	; 0x736 <output_motor_ppm+0x178>
     734:	28 98       	cbi	0x05, 0	; 5
			}
			if (MotorOut4) 
     736:	61 15       	cp	r22, r1
     738:	71 05       	cpc	r23, r1
     73a:	21 f0       	breq	.+8      	; 0x744 <output_motor_ppm+0x186>
			{
				MotorOut4--;
     73c:	61 50       	subi	r22, 0x01	; 1
     73e:	70 40       	sbci	r23, 0x00	; 0
				if (MotorOut4==0) M4 = 0;
     740:	09 f4       	brne	.+2      	; 0x744 <output_motor_ppm+0x186>
     742:	5f 98       	cbi	0x0b, 7	; 11
			}
			if (MotorOut5) 
     744:	41 15       	cp	r20, r1
     746:	51 05       	cpc	r21, r1
     748:	21 f0       	breq	.+8      	; 0x752 <output_motor_ppm+0x194>
			{
				MotorOut5--;
     74a:	41 50       	subi	r20, 0x01	; 1
     74c:	50 40       	sbci	r21, 0x00	; 0
				if (MotorOut5==0) M5 = 0;
     74e:	09 f4       	brne	.+2      	; 0x752 <output_motor_ppm+0x194>
     750:	5e 98       	cbi	0x0b, 6	; 11
     752:	9f 5f       	subi	r25, 0xFF	; 255

		TIFR0 &= ~(1 << TOV0);			// clr overflow
		TCNT0 = 0;						// reset counter

#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
		for (i=0;i<200;i++)	
     754:	98 3c       	cpi	r25, 0xC8	; 200
     756:	c0 f2       	brcs	.-80     	; 0x708 <output_motor_ppm+0x14a>
     758:	30 93 24 01 	sts	0x0124, r19
     75c:	20 93 23 01 	sts	0x0123, r18
     760:	b0 93 2f 01 	sts	0x012F, r27
     764:	a0 93 2e 01 	sts	0x012E, r26
     768:	f0 93 41 01 	sts	0x0141, r31
     76c:	e0 93 40 01 	sts	0x0140, r30
     770:	70 93 35 01 	sts	0x0135, r23
     774:	60 93 34 01 	sts	0x0134, r22
     778:	50 93 5c 01 	sts	0x015C, r21
     77c:	40 93 5b 01 	sts	0x015B, r20
     780:	90 93 15 01 	sts	0x0115, r25
	#endif
		}
#endif

		//Now wait low signal interval
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;
     784:	20 91 00 01 	lds	r18, 0x0100
     788:	30 91 01 01 	lds	r19, 0x0101
     78c:	21 50       	subi	r18, 0x01	; 1
     78e:	30 40       	sbci	r19, 0x00	; 0

		TIFR0 &= ~(1 << TOV0);		// clr overflow
     790:	a8 98       	cbi	0x15, 0	; 21
		TCNT0 = 0;					// reset counter
     792:	16 bc       	out	0x26, r1	; 38
     794:	08 c0       	rjmp	.+16     	; 0x7a6 <output_motor_ppm+0x1e8>

		while (PWM_Low_Count--)
		{
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
     796:	86 b5       	in	r24, 0x26	; 38
     798:	80 35       	cpi	r24, 0x50	; 80
     79a:	e8 f3       	brcs	.-6      	; 0x796 <output_motor_ppm+0x1d8>
			TCNT0 -= 80;
     79c:	86 b5       	in	r24, 0x26	; 38
     79e:	80 55       	subi	r24, 0x50	; 80
     7a0:	86 bd       	out	0x26, r24	; 38
     7a2:	21 50       	subi	r18, 0x01	; 1
     7a4:	30 40       	sbci	r19, 0x00	; 0
		PWM_Low_Count = PWM_Low_Pulse_Interval - 1;

		TIFR0 &= ~(1 << TOV0);		// clr overflow
		TCNT0 = 0;					// reset counter

		while (PWM_Low_Count--)
     7a6:	21 15       	cp	r18, r1
     7a8:	31 05       	cpc	r19, r1
     7aa:	a9 f7       	brne	.-22     	; 0x796 <output_motor_ppm+0x1d8>
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	9f ef       	ldi	r25, 0xFF	; 255
     7b0:	90 93 0e 01 	sts	0x010E, r25
     7b4:	80 93 0d 01 	sts	0x010D, r24
			while (TCNT0 < 80);		// 20 @ 2MHz = 10uS
			TCNT0 -= 80;
		}
	}

	if (! Armed) return;
     7b8:	80 91 46 01 	lds	r24, 0x0146
     7bc:	88 23       	and	r24, r24
     7be:	09 f1       	breq	.+66     	; 0x802 <output_motor_ppm+0x244>

	// Log PWM signal HIGH	
	MotorStartTCNT1 = TCNT1;
     7c0:	80 91 84 00 	lds	r24, 0x0084
     7c4:	90 91 85 00 	lds	r25, 0x0085
     7c8:	90 93 14 01 	sts	0x0114, r25
     7cc:	80 93 13 01 	sts	0x0113, r24
	output_motor_high = true;
     7d0:	51 e0       	ldi	r21, 0x01	; 1
     7d2:	50 93 0a 01 	sts	0x010A, r21

	// turn on pins
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
	M1 = 1;
     7d6:	2a 9a       	sbi	0x05, 2	; 5
	if(ServoPPMRateCount==ServoPPMRateDivider)
     7d8:	40 91 0b 01 	lds	r20, 0x010B
     7dc:	24 2f       	mov	r18, r20
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	80 91 02 01 	lds	r24, 0x0102
     7e4:	90 91 03 01 	lds	r25, 0x0103
     7e8:	28 17       	cp	r18, r24
     7ea:	39 07       	cpc	r19, r25
     7ec:	39 f4       	brne	.+14     	; 0x7fc <output_motor_ppm+0x23e>
	{
		M2 = 1;
     7ee:	29 9a       	sbi	0x05, 1	; 5
		M3 = 1;
     7f0:	28 9a       	sbi	0x05, 0	; 5
		M4 = 1;
     7f2:	5f 9a       	sbi	0x0b, 7	; 11
		M5 = 1;
     7f4:	5e 9a       	sbi	0x0b, 6	; 11
		ServoPPMRateCount = 1;
     7f6:	50 93 0b 01 	sts	0x010B, r21
     7fa:	08 95       	ret
	} else {
		ServoPPMRateCount++;
     7fc:	4f 5f       	subi	r20, 0xFF	; 255
     7fe:	40 93 0b 01 	sts	0x010B, r20
     802:	08 95       	ret

00000804 <Set_EEPROM_Default_Config>:
	}
}

void Set_EEPROM_Default_Config(void)
{
	Config.RollGyroDirection 	= GYRO_REVERSED;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 62 01 	sts	0x0162, r24
	Config.PitchGyroDirection	= GYRO_REVERSED;
     80a:	80 93 63 01 	sts	0x0163, r24
	Config.YawGyroDirection		= GYRO_NORMAL;
     80e:	10 92 64 01 	sts	0x0164, r1

	Config.RxChannel1ZeroOffset	= 1520;
     812:	20 ef       	ldi	r18, 0xF0	; 240
     814:	35 e0       	ldi	r19, 0x05	; 5
     816:	30 93 66 01 	sts	0x0166, r19
     81a:	20 93 65 01 	sts	0x0165, r18
	Config.RxChannel2ZeroOffset	= 1520;
     81e:	30 93 68 01 	sts	0x0168, r19
     822:	20 93 67 01 	sts	0x0167, r18
	Config.RxChannel3ZeroOffset	= 1120;
     826:	80 e6       	ldi	r24, 0x60	; 96
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	90 93 6a 01 	sts	0x016A, r25
     82e:	80 93 69 01 	sts	0x0169, r24
	Config.RxChannel4ZeroOffset	= 1520;
     832:	30 93 6c 01 	sts	0x016C, r19
     836:	20 93 6b 01 	sts	0x016B, r18
}
     83a:	08 95       	ret

0000083c <delay_us>:
	eeprom_write_block_changes( (const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	//current_config CONFIG_STRUCT
	sei();
}

void delay_us(uint8_t time)            /* time delay for us */
{ 
     83c:	08 c0       	rjmp	.+16     	; 0x84e <delay_us+0x12>
	...
 while(time--)
 {
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); 
     84a:	00 00       	nop
     84c:	81 50       	subi	r24, 0x01	; 1
	sei();
}

void delay_us(uint8_t time)            /* time delay for us */
{ 
 while(time--)
     84e:	88 23       	and	r24, r24
     850:	b1 f7       	brne	.-20     	; 0x83e <delay_us+0x2>
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); asm volatile ("NOP"); 
	asm volatile ("NOP"); 
 }
}
     852:	08 95       	ret

00000854 <delay_ms>:

void delay_ms(uint16_t time)
{
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	08 c0       	rjmp	.+16     	; 0x86e <delay_ms+0x1a>
	uint8_t i;
	while(time--)
     85e:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(i=0;i<10;i++) delay_us(100);
     860:	84 e6       	ldi	r24, 0x64	; 100
     862:	0e 94 1e 04 	call	0x83c	; 0x83c <delay_us>
     866:	1f 5f       	subi	r17, 0xFF	; 255
     868:	1a 30       	cpi	r17, 0x0A	; 10
     86a:	d1 f7       	brne	.-12     	; 0x860 <delay_ms+0xc>
     86c:	21 97       	sbiw	r28, 0x01	; 1
}

void delay_ms(uint16_t time)
{
	uint8_t i;
	while(time--)
     86e:	20 97       	sbiw	r28, 0x00	; 0
     870:	b1 f7       	brne	.-20     	; 0x85e <delay_ms+0xa>
	{
		for(i=0;i<10;i++) delay_us(100);
	}
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	08 95       	ret

0000087a <loop>:
		}
	}
}

void loop(void)
{
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
	static uint8_t i;
	static uint16_t Change_Arming=0;
	static uint8_t Arming_TCNT2=0;

	RxGetChannels();
     886:	0e 94 79 02 	call	0x4f2	; 0x4f2 <RxGetChannels>

#if defined(SINGLE_AIRPLANE)
// once armed, never unarm ... want to function as a glider too.
if (!Armed) {
     88a:	80 91 46 01 	lds	r24, 0x0146
     88e:	88 23       	and	r24, r24
     890:	09 f0       	breq	.+2      	; 0x894 <loop+0x1a>
     892:	51 c0       	rjmp	.+162    	; 0x936 <__stack+0x37>
#endif

	if (RxInCollective < 0) {
     894:	80 91 1b 01 	lds	r24, 0x011B
     898:	90 91 1c 01 	lds	r25, 0x011C
     89c:	97 ff       	sbrs	r25, 7
     89e:	4b c0       	rjmp	.+150    	; 0x936 <__stack+0x37>
		// check for stick arming (Timer2 @ 8MHz/1024 = 7812.5KHz)
		// arm: yaw right (>60), dis-arm: yaw left (<-60)
		Change_Arming += (uint8_t) (TCNT2 - Arming_TCNT2);
     8a0:	20 91 b2 00 	lds	r18, 0x00B2
     8a4:	80 91 18 01 	lds	r24, 0x0118
     8a8:	28 1b       	sub	r18, r24
     8aa:	80 91 19 01 	lds	r24, 0x0119
     8ae:	90 91 1a 01 	lds	r25, 0x011A
     8b2:	82 0f       	add	r24, r18
     8b4:	91 1d       	adc	r25, r1
     8b6:	90 93 1a 01 	sts	0x011A, r25
     8ba:	80 93 19 01 	sts	0x0119, r24
		Arming_TCNT2 = TCNT2;
     8be:	80 91 b2 00 	lds	r24, 0x00B2
     8c2:	80 93 18 01 	sts	0x0118, r24

		if (!Armed) {		// nb to switch to Right-Side Arming: 
			if (RxInYaw<STICK_ARMING || abs(RxInPitch) > 30) 	Change_Arming = 0;		// re-set count
     8c6:	80 91 2c 01 	lds	r24, 0x012C
     8ca:	90 91 2d 01 	lds	r25, 0x012D
     8ce:	cc 97       	sbiw	r24, 0x3c	; 60
     8d0:	5c f0       	brlt	.+22     	; 0x8e8 <loop+0x6e>
     8d2:	80 91 44 01 	lds	r24, 0x0144
     8d6:	90 91 45 01 	lds	r25, 0x0145
     8da:	97 ff       	sbrs	r25, 7
     8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <loop+0x6a>
     8de:	90 95       	com	r25
     8e0:	81 95       	neg	r24
     8e2:	9f 4f       	sbci	r25, 0xFF	; 255
     8e4:	4f 97       	sbiw	r24, 0x1f	; 31
     8e6:	24 f0       	brlt	.+8      	; 0x8f0 <loop+0x76>
     8e8:	10 92 1a 01 	sts	0x011A, r1
     8ec:	10 92 19 01 	sts	0x0119, r1
		}

		// 3Sec / 0.000128 = 23437 = 0x5B8D or 
		// 2.5Sec / 0.000128 = 19531 = 0x4C4B
		// 0.5Sec / 0.000128 = 3906 = 0x0F42
		if (Change_Arming>0x0F42)
     8f0:	80 91 19 01 	lds	r24, 0x0119
     8f4:	90 91 1a 01 	lds	r25, 0x011A
     8f8:	83 54       	subi	r24, 0x43	; 67
     8fa:	9f 40       	sbci	r25, 0x0F	; 15
     8fc:	e0 f0       	brcs	.+56     	; 0x936 <__stack+0x37>
		{
			Armed = ! Armed;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 46 01 	sts	0x0146, r24
			LED = 0;
     904:	2e 98       	cbi	0x05, 6	; 5
			ModeDelayCounter = 0;
     906:	10 92 60 01 	sts	0x0160, r1
     90a:	10 92 5f 01 	sts	0x015F, r1

			if (Armed) {
				CalibrateGyros();
     90e:	0e 94 0b 02 	call	0x416	; 0x416 <CalibrateGyros>
				output_motor_high = false;	// re-set 1st time flag
     912:	10 92 0a 01 	sts	0x010A, r1
				LED = 1;
     916:	2e 9a       	sbi	0x05, 6	; 5

				// Normal
				StickRollGain = NORMAL_STICK_ROLL_GAIN;
     918:	82 e3       	ldi	r24, 0x32	; 50
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 3f 01 	sts	0x013F, r25
     920:	80 93 3e 01 	sts	0x013E, r24
				StickPitchGain = NORMAL_STICK_PITCH_GAIN;
     924:	90 93 31 01 	sts	0x0131, r25
     928:	80 93 30 01 	sts	0x0130, r24
				StickYawGain = NORMAL_STICK_YAW_GAIN;
     92c:	90 93 43 01 	sts	0x0143, r25
     930:	80 93 42 01 	sts	0x0142, r24
     934:	78 c1       	rjmp	.+752    	; 0xc26 <__stack+0x327>
#if defined(SINGLE_AIRPLANE)
}
#endif

	//--- Read gyros ---
	ReadGyros(false);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 9e 01 	call	0x33c	; 0x33c <ReadGyros>
#if  !(defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE))
	if (RxInCollective > MAX_COLLECTIVE) RxInCollective = MAX_COLLECTIVE;
#endif

#if defined(SINGLE_AIRPLANE)
	MotorOut2 = 84;		// 84;
     93c:	84 e5       	ldi	r24, 0x54	; 84
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	90 93 2f 01 	sts	0x012F, r25
     944:	80 93 2e 01 	sts	0x012E, r24
	MotorOut3 = 84;		// 84;
     948:	90 93 41 01 	sts	0x0141, r25
     94c:	80 93 40 01 	sts	0x0140, r24
	MotorOut4 = 94;		// 84 + 84/8; Adjust LowPassOutValue
     950:	8e e5       	ldi	r24, 0x5E	; 94
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 35 01 	sts	0x0135, r25
     958:	80 93 34 01 	sts	0x0134, r24
	MotorOut5 = 94;		// 84 + 84/8; Adjust LowPassOutValue
     95c:	90 93 5c 01 	sts	0x015C, r25
     960:	80 93 5b 01 	sts	0x015B, r24
	if (!Armed) {
     964:	80 91 46 01 	lds	r24, 0x0146
     968:	88 23       	and	r24, r24
     96a:	59 f4       	brne	.+22     	; 0x982 <__stack+0x83>
	  MotorOut1 = 0;
     96c:	10 92 24 01 	sts	0x0124, r1
     970:	10 92 23 01 	sts	0x0123, r1
      Armed=true;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 46 01 	sts	0x0146, r24
      output_motor_ppm();		// center the servos
     97a:	0e 94 df 02 	call	0x5be	; 0x5be <output_motor_ppm>
      Armed=false;
     97e:	10 92 46 01 	sts	0x0146, r1
     }
	MotorOut1 = RxInCollective;
     982:	80 91 1b 01 	lds	r24, 0x011B
     986:	90 91 1c 01 	lds	r25, 0x011C
     98a:	90 93 24 01 	sts	0x0124, r25
     98e:	80 93 23 01 	sts	0x0123, r24
#endif

	//--- Calculate roll gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[ROLL] = gyroADC[ROLL] * GainIn[ROLL] * ROLL_GAIN_MULTIPLIER;		// 100 * 50 * 3 = 15000	150 * 50 * 3 = 22500		250 * 50 * 3 = 37500
	gyroADC[ROLL] /= ADC_GAIN_DIVIDER;											// 15000/150 = 100		22500/225 = 100		37500/375 = 100
     992:	20 91 36 01 	lds	r18, 0x0136
     996:	30 91 37 01 	lds	r19, 0x0137
     99a:	c9 01       	movw	r24, r18
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	20 91 1d 01 	lds	r18, 0x011D
     9a8:	30 91 1e 01 	lds	r19, 0x011E
     9ac:	ac 01       	movw	r20, r24
     9ae:	42 9f       	mul	r20, r18
     9b0:	c0 01       	movw	r24, r0
     9b2:	43 9f       	mul	r20, r19
     9b4:	90 0d       	add	r25, r0
     9b6:	52 9f       	mul	r21, r18
     9b8:	90 0d       	add	r25, r0
     9ba:	11 24       	eor	r1, r1
     9bc:	68 ec       	ldi	r22, 0xC8	; 200
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	0e 94 98 08 	call	0x1130	; 0x1130 <__divmodhi4>
     9c4:	fb 01       	movw	r30, r22
     9c6:	70 93 1e 01 	sts	0x011E, r23
     9ca:	60 93 1d 01 	sts	0x011D, r22
	RxInRoll = (RxInRoll * StickRollGain / 100);	// Stick Controll %
     9ce:	20 91 3e 01 	lds	r18, 0x013E
     9d2:	30 91 3f 01 	lds	r19, 0x013F
     9d6:	80 91 2a 01 	lds	r24, 0x012A
     9da:	90 91 2b 01 	lds	r25, 0x012B
     9de:	ac 01       	movw	r20, r24
     9e0:	24 9f       	mul	r18, r20
     9e2:	c0 01       	movw	r24, r0
     9e4:	25 9f       	mul	r18, r21
     9e6:	90 0d       	add	r25, r0
     9e8:	34 9f       	mul	r19, r20
     9ea:	90 0d       	add	r25, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	64 e6       	ldi	r22, 0x64	; 100
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	0e 94 98 08 	call	0x1130	; 0x1130 <__divmodhi4>
     9f6:	9b 01       	movw	r18, r22

	//--- (Add)Adjust roll gyro output to motors
	if (Config.RollGyroDirection == GYRO_NORMAL) {
     9f8:	80 91 62 01 	lds	r24, 0x0162
     9fc:	88 23       	and	r24, r24
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__stack+0x10f>
		RxInRoll += gyroADC[ROLL];
     a00:	e6 0f       	add	r30, r22
     a02:	f7 1f       	adc	r31, r23
     a04:	f0 93 2b 01 	sts	0x012B, r31
     a08:	e0 93 2a 01 	sts	0x012A, r30
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x11b>
	} else {
		RxInRoll -= gyroADC[ROLL];
     a0e:	2e 1b       	sub	r18, r30
     a10:	3f 0b       	sbc	r19, r31
     a12:	30 93 2b 01 	sts	0x012B, r19
     a16:	20 93 2a 01 	sts	0x012A, r18
	}

#if defined(SINGLE_AIRPLANE)
	RxInRoll += LowpassOutServo[ROLL];
     a1a:	20 91 53 01 	lds	r18, 0x0153
     a1e:	30 91 54 01 	lds	r19, 0x0154
	RxInRoll = (RxInRoll >> 3);
     a22:	80 91 2a 01 	lds	r24, 0x012A
     a26:	90 91 2b 01 	lds	r25, 0x012B
     a2a:	82 0f       	add	r24, r18
     a2c:	93 1f       	adc	r25, r19
     a2e:	e3 e0       	ldi	r30, 0x03	; 3
     a30:	95 95       	asr	r25
     a32:	87 95       	ror	r24
     a34:	ea 95       	dec	r30
     a36:	e1 f7       	brne	.-8      	; 0xa30 <__stack+0x131>
     a38:	90 93 2b 01 	sts	0x012B, r25
     a3c:	80 93 2a 01 	sts	0x012A, r24
	LowpassOutServo[ROLL] -= RxInRoll;
     a40:	79 01       	movw	r14, r18
     a42:	e8 1a       	sub	r14, r24
     a44:	f9 0a       	sbc	r15, r25
     a46:	f0 92 54 01 	sts	0x0154, r15
     a4a:	e0 92 53 01 	sts	0x0153, r14

    // differential mode roll but assume servos are mounted mirrored
    // so drive is common mode
	MotorOut3 -= LowpassOutServo[ROLL];
     a4e:	c0 91 40 01 	lds	r28, 0x0140
     a52:	d0 91 41 01 	lds	r29, 0x0141
	MotorOut5 -= LowpassOutServo[ROLL];
     a56:	00 91 5b 01 	lds	r16, 0x015B
     a5a:	10 91 5c 01 	lds	r17, 0x015C
#endif

	//--- Calculate pitch gyro output ---
	// nb IF YOU CHANGE THIS CODE, YOU MUST REMOVE PROPS BEFORE TESTING !!!
	gyroADC[PITCH] = gyroADC[PITCH] * GainIn[PITCH] * PITCH_GAIN_MULTIPLIER;  
	gyroADC[PITCH] /= ADC_GAIN_DIVIDER;
     a5e:	20 91 38 01 	lds	r18, 0x0138
     a62:	30 91 39 01 	lds	r19, 0x0139
     a66:	c9 01       	movw	r24, r18
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	82 0f       	add	r24, r18
     a6e:	93 1f       	adc	r25, r19
     a70:	20 91 1f 01 	lds	r18, 0x011F
     a74:	30 91 20 01 	lds	r19, 0x0120
     a78:	ac 01       	movw	r20, r24
     a7a:	42 9f       	mul	r20, r18
     a7c:	c0 01       	movw	r24, r0
     a7e:	43 9f       	mul	r20, r19
     a80:	90 0d       	add	r25, r0
     a82:	52 9f       	mul	r21, r18
     a84:	90 0d       	add	r25, r0
     a86:	11 24       	eor	r1, r1
     a88:	68 ec       	ldi	r22, 0xC8	; 200
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0e 94 98 08 	call	0x1130	; 0x1130 <__divmodhi4>
     a90:	fb 01       	movw	r30, r22
     a92:	70 93 20 01 	sts	0x0120, r23
     a96:	60 93 1f 01 	sts	0x011F, r22
	RxInPitch = (RxInPitch * StickPitchGain / 100);	// Stick Controll %
     a9a:	20 91 30 01 	lds	r18, 0x0130
     a9e:	30 91 31 01 	lds	r19, 0x0131
     aa2:	80 91 44 01 	lds	r24, 0x0144
     aa6:	90 91 45 01 	lds	r25, 0x0145
     aaa:	ac 01       	movw	r20, r24
     aac:	24 9f       	mul	r18, r20
     aae:	c0 01       	movw	r24, r0
     ab0:	25 9f       	mul	r18, r21
     ab2:	90 0d       	add	r25, r0
     ab4:	34 9f       	mul	r19, r20
     ab6:	90 0d       	add	r25, r0
     ab8:	11 24       	eor	r1, r1
     aba:	64 e6       	ldi	r22, 0x64	; 100
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	0e 94 98 08 	call	0x1130	; 0x1130 <__divmodhi4>
     ac2:	9b 01       	movw	r18, r22

	//--- (Add)Adjust pitch gyro output to motors
	if (Config.PitchGyroDirection == GYRO_NORMAL) {	
     ac4:	80 91 63 01 	lds	r24, 0x0163
     ac8:	88 23       	and	r24, r24
     aca:	39 f4       	brne	.+14     	; 0xada <__stack+0x1db>
		RxInPitch += gyroADC[PITCH];
     acc:	e6 0f       	add	r30, r22
     ace:	f7 1f       	adc	r31, r23
     ad0:	f0 93 45 01 	sts	0x0145, r31
     ad4:	e0 93 44 01 	sts	0x0144, r30
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <__stack+0x1e7>
	} else {
		RxInPitch -= gyroADC[PITCH];
     ada:	2e 1b       	sub	r18, r30
     adc:	3f 0b       	sbc	r19, r31
     ade:	30 93 45 01 	sts	0x0145, r19
     ae2:	20 93 44 01 	sts	0x0144, r18
	}

#if defined(SINGLE_AIRPLANE)
	RxInPitch += LowpassOutServo[PITCH];
     ae6:	20 91 55 01 	lds	r18, 0x0155
     aea:	30 91 56 01 	lds	r19, 0x0156
	RxInPitch = (RxInPitch >> 3);
     aee:	80 91 44 01 	lds	r24, 0x0144
     af2:	90 91 45 01 	lds	r25, 0x0145
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	63 e0       	ldi	r22, 0x03	; 3
     afc:	95 95       	asr	r25
     afe:	87 95       	ror	r24
     b00:	6a 95       	dec	r22
     b02:	e1 f7       	brne	.-8      	; 0xafc <__stack+0x1fd>
     b04:	90 93 45 01 	sts	0x0145, r25
     b08:	80 93 44 01 	sts	0x0144, r24
	LowpassOutServo[PITCH] -= RxInPitch;
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	30 93 56 01 	sts	0x0156, r19
     b14:	20 93 55 01 	sts	0x0155, r18

    // common mode pitch but assume servos are mounted mirrored
    // so drive is differential
	MotorOut3 += LowpassOutServo[PITCH];
     b18:	c2 0f       	add	r28, r18
     b1a:	d3 1f       	adc	r29, r19
     b1c:	ce 19       	sub	r28, r14
     b1e:	df 09       	sbc	r29, r15
     b20:	d0 93 41 01 	sts	0x0141, r29
     b24:	c0 93 40 01 	sts	0x0140, r28
	MotorOut5 -= LowpassOutServo[PITCH];
     b28:	0e 19       	sub	r16, r14
     b2a:	1f 09       	sbc	r17, r15
     b2c:	02 1b       	sub	r16, r18
     b2e:	13 0b       	sbc	r17, r19
     b30:	10 93 5c 01 	sts	0x015C, r17
     b34:	00 93 5b 01 	sts	0x015B, r16
	MotorOut4 += RxInPitch;
#endif

	//--- Calculate yaw gyro output ---
	gyroADC[YAW] = (gyroADC[YAW] * GainIn[YAW] * YAW_GAIN_MULTIPLIER);
	gyroADC[YAW] /= ADC_GAIN_DIVIDER;
     b38:	20 91 3a 01 	lds	r18, 0x013A
     b3c:	30 91 3b 01 	lds	r19, 0x013B
     b40:	c9 01       	movw	r24, r18
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	20 91 21 01 	lds	r18, 0x0121
     b4e:	30 91 22 01 	lds	r19, 0x0122
     b52:	ac 01       	movw	r20, r24
     b54:	42 9f       	mul	r20, r18
     b56:	c0 01       	movw	r24, r0
     b58:	43 9f       	mul	r20, r19
     b5a:	90 0d       	add	r25, r0
     b5c:	52 9f       	mul	r21, r18
     b5e:	90 0d       	add	r25, r0
     b60:	11 24       	eor	r1, r1
     b62:	68 ec       	ldi	r22, 0xC8	; 200
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	0e 94 98 08 	call	0x1130	; 0x1130 <__divmodhi4>
     b6a:	fb 01       	movw	r30, r22
     b6c:	70 93 22 01 	sts	0x0122, r23
     b70:	60 93 21 01 	sts	0x0121, r22
	RxInYaw = (RxInYaw * StickYawGain / 100);			// Stick Controll %
     b74:	20 91 42 01 	lds	r18, 0x0142
     b78:	30 91 43 01 	lds	r19, 0x0143
     b7c:	80 91 2c 01 	lds	r24, 0x012C
     b80:	90 91 2d 01 	lds	r25, 0x012D
     b84:	ac 01       	movw	r20, r24
     b86:	24 9f       	mul	r18, r20
     b88:	c0 01       	movw	r24, r0
     b8a:	25 9f       	mul	r18, r21
     b8c:	90 0d       	add	r25, r0
     b8e:	34 9f       	mul	r19, r20
     b90:	90 0d       	add	r25, r0
     b92:	11 24       	eor	r1, r1
     b94:	64 e6       	ldi	r22, 0x64	; 100
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 98 08 	call	0x1130	; 0x1130 <__divmodhi4>
     b9c:	9b 01       	movw	r18, r22

	//--- (Add)Adjust yaw gyro output to motors
	if (Config.YawGyroDirection == GYRO_NORMAL) {		// scale gyro output
     b9e:	80 91 64 01 	lds	r24, 0x0164
     ba2:	88 23       	and	r24, r24
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <__stack+0x2b5>
		RxInYaw += gyroADC[YAW];
     ba6:	e6 0f       	add	r30, r22
     ba8:	f7 1f       	adc	r31, r23
     baa:	f0 93 2d 01 	sts	0x012D, r31
     bae:	e0 93 2c 01 	sts	0x012C, r30
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <__stack+0x2c1>
	} else {
		RxInYaw -= gyroADC[YAW];
     bb4:	2e 1b       	sub	r18, r30
     bb6:	3f 0b       	sbc	r19, r31
     bb8:	30 93 2d 01 	sts	0x012D, r19
     bbc:	20 93 2c 01 	sts	0x012C, r18
	}

#if defined(SINGLE_AIRPLANE)
	RxInYaw -= LowpassOutServo[YAW];
     bc0:	80 91 57 01 	lds	r24, 0x0157
     bc4:	90 91 58 01 	lds	r25, 0x0158
	RxInYaw = (RxInYaw >> 3);
     bc8:	20 91 2c 01 	lds	r18, 0x012C
     bcc:	30 91 2d 01 	lds	r19, 0x012D
     bd0:	28 1b       	sub	r18, r24
     bd2:	39 0b       	sbc	r19, r25
     bd4:	43 e0       	ldi	r20, 0x03	; 3
     bd6:	35 95       	asr	r19
     bd8:	27 95       	ror	r18
     bda:	4a 95       	dec	r20
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <__stack+0x2d7>
     bde:	30 93 2d 01 	sts	0x012D, r19
     be2:	20 93 2c 01 	sts	0x012C, r18
	LowpassOutServo[YAW] += RxInYaw;
     be6:	28 0f       	add	r18, r24
     be8:	39 1f       	adc	r19, r25
     bea:	30 93 58 01 	sts	0x0158, r19
     bee:	20 93 57 01 	sts	0x0157, r18

	MotorOut2 -= LowpassOutServo[YAW];
     bf2:	80 91 2e 01 	lds	r24, 0x012E
     bf6:	90 91 2f 01 	lds	r25, 0x012F
     bfa:	82 1b       	sub	r24, r18
     bfc:	93 0b       	sbc	r25, r19
     bfe:	90 93 2f 01 	sts	0x012F, r25
     c02:	80 93 2e 01 	sts	0x012E, r24
	MotorOut4 -= LowpassOutServo[YAW];
     c06:	80 91 34 01 	lds	r24, 0x0134
     c0a:	90 91 35 01 	lds	r25, 0x0135
     c0e:	82 1b       	sub	r24, r18
     c10:	93 0b       	sbc	r25, r19
     c12:	90 93 35 01 	sts	0x0135, r25
     c16:	80 93 34 01 	sts	0x0134, r24
		MotorOut5 = 0;
		MotorOut6 = 0;
#endif
	}

	if (Armed) output_motor_ppm();		// output ESC signal
     c1a:	80 91 46 01 	lds	r24, 0x0146
     c1e:	88 23       	and	r24, r24
     c20:	11 f0       	breq	.+4      	; 0xc26 <__stack+0x327>
     c22:	0e 94 df 02 	call	0x5be	; 0x5be <output_motor_ppm>
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	08 95       	ret

00000c34 <eeprom_write_byte_changed>:
	M6 = 1;
#endif
}

void eeprom_write_byte_changed( uint8_t * addr, uint8_t value )
{ 
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
     c3c:	16 2f       	mov	r17, r22
	if(eeprom_read_byte(addr) != value)
     c3e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__eerd_byte_m328p>
     c42:	81 17       	cp	r24, r17
     c44:	21 f0       	breq	.+8      	; 0xc4e <eeprom_write_byte_changed+0x1a>
	{
		eeprom_write_byte( addr, value );
     c46:	ce 01       	movw	r24, r28
     c48:	61 2f       	mov	r22, r17
     c4a:	0e 94 c3 08 	call	0x1186	; 0x1186 <__eewr_byte_m328p>
	}
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <eeprom_write_block_changes>:

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	8c 01       	movw	r16, r24
     c68:	6b 01       	movw	r12, r22
     c6a:	7a 01       	movw	r14, r20
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	d0 e0       	ldi	r29, 0x00	; 0
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <eeprom_write_block_changes+0x2e>
	size_t len;

	for(len=0;len<size;len++)
	{
		eeprom_write_byte_changed( dest,  *src );
     c72:	c6 01       	movw	r24, r12
     c74:	8c 0f       	add	r24, r28
     c76:	9d 1f       	adc	r25, r29
     c78:	f8 01       	movw	r30, r16
     c7a:	61 91       	ld	r22, Z+
     c7c:	8f 01       	movw	r16, r30
     c7e:	0e 94 1a 06 	call	0xc34	; 0xc34 <eeprom_write_byte_changed>

void eeprom_write_block_changes( const uint8_t * src, void * dest, size_t size )
{ 
	size_t len;

	for(len=0;len<size;len++)
     c82:	21 96       	adiw	r28, 0x01	; 1
     c84:	ce 15       	cp	r28, r14
     c86:	df 05       	cpc	r29, r15
     c88:	a0 f3       	brcs	.-24     	; 0xc72 <eeprom_write_block_changes+0x1c>
		eeprom_write_byte_changed( dest,  *src );

		src++;
		dest++;
	}
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	08 95       	ret

00000c9c <Save_Config_to_EEPROM>:
}

void Save_Config_to_EEPROM(void)
{
	// write to eeProm
	cli();
     c9c:	f8 94       	cli
	eeprom_write_block_changes( (const void*) &Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT));	//current_config CONFIG_STRUCT
     c9e:	81 e6       	ldi	r24, 0x61	; 97
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	4c e0       	ldi	r20, 0x0C	; 12
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	0e 94 2b 06 	call	0xc56	; 0xc56 <eeprom_write_block_changes>
	sei();
     cae:	78 94       	sei
}
     cb0:	08 95       	ret

00000cb2 <Initial_EEPROM_Config_Load>:
}

void Initial_EEPROM_Config_Load(void)
{
	// load up last settings from EEPROM
	if(eeprom_read_byte((uint8_t*) EEPROM_DATA_START_POS )!=0x47)
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 bb 08 	call	0x1176	; 0x1176 <__eerd_byte_m328p>
     cba:	87 34       	cpi	r24, 0x47	; 71
     cbc:	41 f0       	breq	.+16     	; 0xcce <Initial_EEPROM_Config_Load+0x1c>
	{
		Config.setup = 0x47;
     cbe:	87 e4       	ldi	r24, 0x47	; 71
     cc0:	80 93 61 01 	sts	0x0161, r24
		Set_EEPROM_Default_Config();
     cc4:	0e 94 02 04 	call	0x804	; 0x804 <Set_EEPROM_Default_Config>
		// write to eeProm
		Save_Config_to_EEPROM();
     cc8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Save_Config_to_EEPROM>
     ccc:	08 95       	ret
	} else {
		// read eeprom
		eeprom_read_block(&Config, (void*) EEPROM_DATA_START_POS, sizeof(CONFIG_STRUCT)); 
     cce:	81 e6       	ldi	r24, 0x61	; 97
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	4c e0       	ldi	r20, 0x0C	; 12
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	0e 94 ab 08 	call	0x1156	; 0x1156 <__eerd_block_m328p>
     cde:	08 95       	ret

00000ce0 <setup>:

	return 1;
}

void setup(void)
{
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
	uint16_t i;	// nb was uint8_t, must be uint16_t for TRI
	uint16_t RxChannel1ZeroOffset, RxChannel2ZeroOffset, RxChannel4ZeroOffset;

	MCUCR |= (1<<PUD);	// Pull-up Disable
     cf0:	85 b7       	in	r24, 0x35	; 53
     cf2:	80 61       	ori	r24, 0x10	; 16
     cf4:	85 bf       	out	0x35, r24	; 53

	RX_ROLL_DIR 		= INPUT;
     cf6:	51 98       	cbi	0x0a, 1	; 10
	RX_PITCH_DIR 		= INPUT;
     cf8:	52 98       	cbi	0x0a, 2	; 10
	RX_COLL_DIR   		= INPUT;
     cfa:	53 98       	cbi	0x0a, 3	; 10
	RX_YAW_DIR   	 	= INPUT;
     cfc:	27 98       	cbi	0x04, 7	; 4

	GYRO_YAW_DIR 	 	= INPUT;
     cfe:	38 98       	cbi	0x07, 0	; 7
	GYRO_PITCH_DIR 	 	= INPUT;
     d00:	39 98       	cbi	0x07, 1	; 7
	GYRO_ROLL_DIR  		= INPUT;
     d02:	3a 98       	cbi	0x07, 2	; 7
	GAIN_YAW_DIR 	 	= INPUT;
     d04:	3d 98       	cbi	0x07, 5	; 7
	GAIN_PITCH_DIR		= INPUT;
     d06:	3c 98       	cbi	0x07, 4	; 7
	GAIN_ROLL_DIR  		= INPUT;
     d08:	3b 98       	cbi	0x07, 3	; 7

	M1_DIR 				= OUTPUT;
     d0a:	22 9a       	sbi	0x04, 2	; 4
	M2_DIR 				= OUTPUT;
     d0c:	21 9a       	sbi	0x04, 1	; 4
	M3_DIR 			 	= OUTPUT;
     d0e:	20 9a       	sbi	0x04, 0	; 4
	M4_DIR 			 	= OUTPUT;
     d10:	57 9a       	sbi	0x0a, 7	; 10
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE) || defined(TWIN_COPTER) || defined(TRI_COPTER) || defined(HEX_COPTER) || defined(Y6_COPTER)
	M5_DIR 				= OUTPUT;
     d12:	56 9a       	sbi	0x0a, 6	; 10
#endif
#if defined(TWIN_COPTER) || defined(HEX_COPTER) || defined(Y6_COPTER)
	M6_DIR 				= OUTPUT;
#endif
	LED_DIR 			= OUTPUT;
     d14:	26 9a       	sbi	0x04, 6	; 4

	LED			= 0;
     d16:	2e 98       	cbi	0x05, 6	; 5
	RX_ROLL 	= 0;
     d18:	49 98       	cbi	0x09, 1	; 9
	RX_PITCH 	= 0;
     d1a:	4a 98       	cbi	0x09, 2	; 9
	RX_COLL  	= 0;
     d1c:	4b 98       	cbi	0x09, 3	; 9
	RX_YAW   	= 0;
     d1e:	1f 98       	cbi	0x03, 7	; 3

	// pin change interrupt enables
	PCICR |= (1 << PCIE0);			// PCINT0..7		
     d20:	80 91 68 00 	lds	r24, 0x0068
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	80 93 68 00 	sts	0x0068, r24
	PCICR |= (1 << PCIE2);			// PCINT16..23
     d2a:	80 91 68 00 	lds	r24, 0x0068
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	80 93 68 00 	sts	0x0068, r24

	// pin change masks
	PCMSK0 |= (1 << PCINT7);		// PB7
     d34:	80 91 6b 00 	lds	r24, 0x006B
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	80 93 6b 00 	sts	0x006B, r24
	PCMSK2 |= (1 << PCINT17);		// PD1
     d3e:	80 91 6d 00 	lds	r24, 0x006D
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	80 93 6d 00 	sts	0x006D, r24
	// external interrupts
	EICRA  = (1 << ISC00) | (1 << ISC10);	// Any change INT0, INT1
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	80 93 69 00 	sts	0x0069, r24
	EIMSK  = (1 << INT0) | (1 << INT1);		// External Interrupt Mask Register
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (1 << INTF0) | (1 << INTF1);
     d52:	8c b3       	in	r24, 0x1c	; 28
     d54:	83 60       	ori	r24, 0x03	; 3
     d56:	8c bb       	out	0x1c, r24	; 28

	// timer0 (8bit) - run @ 8MHz
	// used to control ESC/servo pulse length
	TCCR0A = 0;						// normal operation
     d58:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS00);			// clk/0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0; 					// no interrupts
     d5e:	10 92 6e 00 	sts	0x006E, r1

	// timer1 (16bit) - run @ 1Mhz
	// used to measure Rx Signals & control ESC/servo output rate
	TCCR1A = 0;
     d62:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS11);
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	80 93 81 00 	sts	0x0081, r24

	// timer2 8bit - run @ 8MHz / 1024 = 7812.5KHz
	// and Stick-Arming
	TCCR2A = 0;	
     d6c:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);	// /1024
     d70:	87 e0       	ldi	r24, 0x07	; 7
     d72:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = 0;
     d76:	10 92 70 00 	sts	0x0070, r1
	TIFR2  = 0;
     d7a:	17 ba       	out	0x17, r1	; 23
	TCNT2 = 0;		// reset counter
     d7c:	10 92 b2 00 	sts	0x00B2, r1
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	f9 01       	movw	r30, r18
     d86:	31 96       	adiw	r30, 0x01	; 1
	// calculate Servo Rate divider
	ServoPPMRateDivider = 0;
	do {
		ServoPPMRateDivider++;
		i = ESC_RATE / ServoPPMRateDivider;
	} while (i>50);
     d88:	8f ee       	ldi	r24, 0xEF	; 239
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	b9 01       	movw	r22, r18
     d8e:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
     d92:	63 33       	cpi	r22, 0x33	; 51
     d94:	71 05       	cpc	r23, r1
     d96:	10 f0       	brcs	.+4      	; 0xd9c <setup+0xbc>
     d98:	9f 01       	movw	r18, r30
     d9a:	f4 cf       	rjmp	.-24     	; 0xd84 <setup+0xa4>
     d9c:	30 93 03 01 	sts	0x0103, r19
     da0:	20 93 02 01 	sts	0x0102, r18
#endif


#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
	LowpassOutServo[ROLL]	= 84;					// Center
     da4:	84 e5       	ldi	r24, 0x54	; 84
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	90 93 54 01 	sts	0x0154, r25
     dac:	80 93 53 01 	sts	0x0153, r24
	LowpassOutServo[PITCH]	= 84;					// Center
     db0:	90 93 56 01 	sts	0x0156, r25
     db4:	80 93 55 01 	sts	0x0155, r24
	LowpassOutServo[YAW]	= 84;					// Center
     db8:	90 93 58 01 	sts	0x0158, r25
     dbc:	80 93 57 01 	sts	0x0157, r24
	LowpassOutServo[1]		= 50;					// Yaw
#elif defined(TRI_COPTER)
	LowpassOutYaw			= 50;					// Center
#endif

	Initial_EEPROM_Config_Load();					// loads config at start-up 
     dc0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Initial_EEPROM_Config_Load>
	if (Armed) output_motor_ppm();		// output ESC signal
}

void Init_ADC(void)
{
	DIDR0 	= 0b00111111;	// Digital Input Disable Register - ADC5..0 Digital Input Disable
     dc4:	8f e3       	ldi	r24, 0x3F	; 63
     dc6:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB 	= 0b00000000; 	// ADC Control and Status Register B - ADTS2:0
     dca:	10 92 7b 00 	sts	0x007B, r1

	Initial_EEPROM_Config_Load();					// loads config at start-up 

	Init_ADC();

	GyroCalibrated = false;
     dce:	10 92 25 01 	sts	0x0125, r1
	Armed = false;
     dd2:	10 92 46 01 	sts	0x0146, r1
	RxChannelsUpdatingFlag = 0;
     dd6:	10 92 5a 01 	sts	0x015A, r1
     dda:	10 92 59 01 	sts	0x0159, r1

	RxChannel1 = Config.RxChannel1ZeroOffset;		// prime the channels 1520;
     dde:	80 91 65 01 	lds	r24, 0x0165
     de2:	90 91 66 01 	lds	r25, 0x0166
     de6:	90 93 5e 01 	sts	0x015E, r25
     dea:	80 93 5d 01 	sts	0x015D, r24
	RxChannel2 = Config.RxChannel2ZeroOffset;		// 1520;
     dee:	80 91 67 01 	lds	r24, 0x0167
     df2:	90 91 68 01 	lds	r25, 0x0168
     df6:	90 93 3d 01 	sts	0x013D, r25
     dfa:	80 93 3c 01 	sts	0x013C, r24
	RxChannel3 = Config.RxChannel3ZeroOffset;		// 1120;
     dfe:	80 91 69 01 	lds	r24, 0x0169
     e02:	90 91 6a 01 	lds	r25, 0x016A
     e06:	90 93 52 01 	sts	0x0152, r25
     e0a:	80 93 51 01 	sts	0x0151, r24
	RxChannel4 = Config.RxChannel4ZeroOffset;		// 1520;
     e0e:	80 91 6b 01 	lds	r24, 0x016B
     e12:	90 91 6c 01 	lds	r25, 0x016C
     e16:	90 93 29 01 	sts	0x0129, r25
     e1a:	80 93 28 01 	sts	0x0128, r24

	// flash LED
	LED = 1;
     e1e:	2e 9a       	sbi	0x05, 6	; 5
	delay_ms(150);
     e20:	86 e9       	ldi	r24, 0x96	; 150
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
	LED = 0;
     e28:	2e 98       	cbi	0x05, 6	; 5

	sei();											// Global Interrupts 
     e2a:	78 94       	sei


// this doe not work ??
#if defined(SINGLE_AIRPLANE)
	MotorOut1 = 0;
     e2c:	10 92 24 01 	sts	0x0124, r1
     e30:	10 92 23 01 	sts	0x0123, r1
	MotorOut2 = 84;		// 84;
     e34:	84 e5       	ldi	r24, 0x54	; 84
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 2f 01 	sts	0x012F, r25
     e3c:	80 93 2e 01 	sts	0x012E, r24
	MotorOut3 = 84;		// 84;
     e40:	90 93 41 01 	sts	0x0141, r25
     e44:	80 93 40 01 	sts	0x0140, r24
	MotorOut4 = 94;		// 84 + 84/8; Adjust LowPassOutValue
     e48:	8e e5       	ldi	r24, 0x5E	; 94
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 35 01 	sts	0x0135, r25
     e50:	80 93 34 01 	sts	0x0134, r24
	MotorOut5 = 94;		// 84 + 84/8; Adjust LowPassOutValue
     e54:	90 93 5c 01 	sts	0x015C, r25
     e58:	80 93 5b 01 	sts	0x015B, r24
    Armed=true;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 46 01 	sts	0x0146, r24
    output_motor_ppm();		// center the servos
     e62:	0e 94 df 02 	call	0x5be	; 0x5be <output_motor_ppm>
    output_motor_ppm();		// center the servos
     e66:	0e 94 df 02 	call	0x5be	; 0x5be <output_motor_ppm>
    output_motor_ppm();		// center the servos
     e6a:	0e 94 df 02 	call	0x5be	; 0x5be <output_motor_ppm>
    Armed=false;
     e6e:	10 92 46 01 	sts	0x0146, r1
#endif


	// 2 second delay
//	delay_ms(1500);
	delay_ms(100);
     e72:	84 e6       	ldi	r24, 0x64	; 100
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
	
	ReadGainPots();
     e7a:	0e 94 2d 01 	call	0x25a	; 0x25a <ReadGainPots>
	ReadGainPots();
     e7e:	0e 94 2d 01 	call	0x25a	; 0x25a <ReadGainPots>

	// clear config
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100 && GainInADC[ROLL]  < (UC_ADC_MAX*5)/100 && GainInADC[YAW]   < (UC_ADC_MAX*5)/100 )
     e82:	80 91 4b 01 	lds	r24, 0x014B
     e86:	90 91 4c 01 	lds	r25, 0x014C
     e8a:	c3 97       	sbiw	r24, 0x33	; 51
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <setup+0x1b0>
     e8e:	93 c0       	rjmp	.+294    	; 0xfb6 <setup+0x2d6>
     e90:	80 91 49 01 	lds	r24, 0x0149
     e94:	90 91 4a 01 	lds	r25, 0x014A
     e98:	c3 97       	sbiw	r24, 0x33	; 51
     e9a:	48 f4       	brcc	.+18     	; 0xeae <setup+0x1ce>
     e9c:	80 91 4d 01 	lds	r24, 0x014D
     ea0:	90 91 4e 01 	lds	r25, 0x014E
     ea4:	c3 97       	sbiw	r24, 0x33	; 51
     ea6:	18 f4       	brcc	.+6      	; 0xeae <setup+0x1ce>
	{
		Set_EEPROM_Default_Config();
     ea8:	0e 94 02 04 	call	0x804	; 0x804 <Set_EEPROM_Default_Config>
     eac:	ff cf       	rjmp	.-2      	; 0xeac <setup+0x1cc>

	// Stick Centering
	if (GainInADC[PITCH] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
	    // set offsets to zero (otherwise we affect what we want to calibrate !!)
	    Config.RxChannel1ZeroOffset  = 0;
     eae:	10 92 66 01 	sts	0x0166, r1
     eb2:	10 92 65 01 	sts	0x0165, r1
	    Config.RxChannel2ZeroOffset  = 0;
     eb6:	10 92 68 01 	sts	0x0168, r1
     eba:	10 92 67 01 	sts	0x0167, r1
	    Config.RxChannel4ZeroOffset  = 0;
     ebe:	10 92 6c 01 	sts	0x016C, r1
     ec2:	10 92 6b 01 	sts	0x016B, r1
     ec6:	c0 e0       	ldi	r28, 0x00	; 0
     ec8:	d0 e0       	ldi	r29, 0x00	; 0

		// flash LED 3 times
		for (i=0;i<6;i++)
		{
			LED = 1;
     eca:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(150);
     ecc:	86 e9       	ldi	r24, 0x96	; 150
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			LED = 0;
     ed4:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(150);
     ed6:	86 e9       	ldi	r24, 0x96	; 150
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
	    Config.RxChannel1ZeroOffset  = 0;
	    Config.RxChannel2ZeroOffset  = 0;
	    Config.RxChannel4ZeroOffset  = 0;

		// flash LED 3 times
		for (i=0;i<6;i++)
     ede:	21 96       	adiw	r28, 0x01	; 1
     ee0:	c6 30       	cpi	r28, 0x06	; 6
     ee2:	d1 05       	cpc	r29, r1
     ee4:	91 f7       	brne	.-28     	; 0xeca <setup+0x1ea>
     ee6:	c0 e0       	ldi	r28, 0x00	; 0
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ms(150);
		}
		// 5 Seconds Delay, for binding
		for (i=0;i<20;i++)
        {
			LED = 1;
     eea:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(50);
     eec:	82 e3       	ldi	r24, 0x32	; 50
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			LED = 0;
     ef4:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(50);
     ef6:	82 e3       	ldi	r24, 0x32	; 50
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			delay_ms(150);
			LED = 0;
			delay_ms(150);
		}
		// 5 Seconds Delay, for binding
		for (i=0;i<20;i++)
     efe:	21 96       	adiw	r28, 0x01	; 1
     f00:	c4 31       	cpi	r28, 0x14	; 20
     f02:	d1 05       	cpc	r29, r1
     f04:	91 f7       	brne	.-28     	; 0xeea <setup+0x20a>
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ms(50);
        }
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     f0a:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(150);
     f0c:	86 e9       	ldi	r24, 0x96	; 150
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			LED = 0;
     f14:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(150);
     f16:	86 e9       	ldi	r24, 0x96	; 150
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			delay_ms(50);
			LED = 0;
			delay_ms(50);
        }
		// flash LED 3 times
		for (i=0;i<3;i++)
     f1e:	21 96       	adiw	r28, 0x01	; 1
     f20:	c3 30       	cpi	r28, 0x03	; 3
     f22:	d1 05       	cpc	r29, r1
     f24:	91 f7       	brne	.-28     	; 0xf0a <setup+0x22a>
     f26:	c0 e0       	ldi	r28, 0x00	; 0
     f28:	d0 e0       	ldi	r29, 0x00	; 0
     f2a:	ee 24       	eor	r14, r14
     f2c:	ff 24       	eor	r15, r15
     f2e:	00 e0       	ldi	r16, 0x00	; 0
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	cc 24       	eor	r12, r12
     f34:	dd 24       	eor	r13, r13

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
		{
	 		RxGetChannels();
     f36:	0e 94 79 02 	call	0x4f2	; 0x4f2 <RxGetChannels>

		    RxChannel1ZeroOffset += RxInRoll;
     f3a:	80 91 2a 01 	lds	r24, 0x012A
     f3e:	90 91 2b 01 	lds	r25, 0x012B
     f42:	e8 0e       	add	r14, r24
     f44:	f9 1e       	adc	r15, r25
		    RxChannel2ZeroOffset += RxInPitch;
     f46:	80 91 44 01 	lds	r24, 0x0144
     f4a:	90 91 45 01 	lds	r25, 0x0145
     f4e:	08 0f       	add	r16, r24
     f50:	19 1f       	adc	r17, r25
		    RxChannel4ZeroOffset += RxInYaw;
     f52:	80 91 2c 01 	lds	r24, 0x012C
     f56:	90 91 2d 01 	lds	r25, 0x012D
     f5a:	c8 0e       	add	r12, r24
     f5c:	d9 1e       	adc	r13, r25

			delay_ms(100);
     f5e:	84 e6       	ldi	r24, 0x64	; 100
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			delay_ms(150);
		}

		RxChannel1ZeroOffset = RxChannel2ZeroOffset = RxChannel4ZeroOffset = 0;
		
		for (i=0;i<4;i++)
     f66:	21 96       	adiw	r28, 0x01	; 1
     f68:	c4 30       	cpi	r28, 0x04	; 4
     f6a:	d1 05       	cpc	r29, r1
     f6c:	21 f7       	brne	.-56     	; 0xf36 <setup+0x256>
		    RxChannel4ZeroOffset += RxInYaw;

			delay_ms(100);
		}
		// nb RxGetChannels() divides RxInXXX by 4 so we won't here
	    Config.RxChannel1ZeroOffset  = RxChannel1ZeroOffset;
     f6e:	f0 92 66 01 	sts	0x0166, r15
     f72:	e0 92 65 01 	sts	0x0165, r14
	    Config.RxChannel2ZeroOffset  = RxChannel2ZeroOffset;
     f76:	10 93 68 01 	sts	0x0168, r17
     f7a:	00 93 67 01 	sts	0x0167, r16
	    Config.RxChannel3ZeroOffset  = 1120;
     f7e:	80 e6       	ldi	r24, 0x60	; 96
     f80:	94 e0       	ldi	r25, 0x04	; 4
     f82:	90 93 6a 01 	sts	0x016A, r25
     f86:	80 93 69 01 	sts	0x0169, r24
	    Config.RxChannel4ZeroOffset  = RxChannel4ZeroOffset;
     f8a:	d0 92 6c 01 	sts	0x016C, r13
     f8e:	c0 92 6b 01 	sts	0x016B, r12

// flash LED, Ending Sign
		LED = 1;
     f92:	2e 9a       	sbi	0x05, 6	; 5
		delay_ms(150);
     f94:	86 e9       	ldi	r24, 0x96	; 150
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
		LED = 0;
     f9c:	2e 98       	cbi	0x05, 6	; 5
		delay_ms(150);
     f9e:	86 e9       	ldi	r24, 0x96	; 150
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>

		// Store gyro direction to EEPROM
		Save_Config_to_EEPROM();
     fa6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Save_Config_to_EEPROM>

		// flash LED, Ending Sign
		LED = 1;
     faa:	2e 9a       	sbi	0x05, 6	; 5
		delay_ms(150);
     fac:	86 e9       	ldi	r24, 0x96	; 150
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
		LED = 0;
     fb4:	2e 98       	cbi	0x05, 6	; 5
	}


	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
     fb6:	80 91 49 01 	lds	r24, 0x0149
     fba:	90 91 4a 01 	lds	r25, 0x014A
     fbe:	c3 97       	sbiw	r24, 0x33	; 51
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <setup+0x2e4>
     fc2:	50 c0       	rjmp	.+160    	; 0x1064 <setup+0x384>
     fc4:	c0 e0       	ldi	r28, 0x00	; 0
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
     fc8:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
     fca:	89 e1       	ldi	r24, 0x19	; 25
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			LED = 0;
     fd2:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>

	// Gyro direction reversing
	if (GainInADC[ROLL] < (UC_ADC_MAX*5)/100)		// less than 5% (5/100) * 1023 = 51 
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
     fdc:	21 96       	adiw	r28, 0x01	; 1
     fde:	c3 30       	cpi	r28, 0x03	; 3
     fe0:	d1 05       	cpc	r29, r1
     fe2:	91 f7       	brne	.-28     	; 0xfc8 <setup+0x2e8>
			} else if (RxInYaw < -30) { // normal(left)
				Config.YawGyroDirection = GYRO_NORMAL;
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
				Config.YawGyroDirection = GYRO_REVERSED;
     fe4:	11 e0       	ldi	r17, 0x01	; 1
			delay_ms(25);
		}

		while(1)
		{
			RxGetChannels();
     fe6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <RxGetChannels>

			if (RxInRoll < -30) {	// normal(left)
     fea:	80 91 2a 01 	lds	r24, 0x012A
     fee:	90 91 2b 01 	lds	r25, 0x012B
     ff2:	82 5e       	subi	r24, 0xE2	; 226
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	2c f4       	brge	.+10     	; 0x1002 <setup+0x322>
				Config.RollGyroDirection = GYRO_NORMAL;
     ff8:	10 92 62 01 	sts	0x0162, r1
				Save_Config_to_EEPROM();
     ffc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Save_Config_to_EEPROM>
				LED = 1;
    1000:	2e 9a       	sbi	0x05, 6	; 5
			} if (RxInRoll > 30) {	// reverse(right)
    1002:	80 91 2a 01 	lds	r24, 0x012A
    1006:	90 91 2b 01 	lds	r25, 0x012B
    100a:	4f 97       	sbiw	r24, 0x1f	; 31
    100c:	1c f0       	brlt	.+6      	; 0x1014 <setup+0x334>
				Config.RollGyroDirection = GYRO_REVERSED;
    100e:	10 93 62 01 	sts	0x0162, r17
    1012:	1f c0       	rjmp	.+62     	; 0x1052 <setup+0x372>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch < -30) { // normal(up)
    1014:	80 91 44 01 	lds	r24, 0x0144
    1018:	90 91 45 01 	lds	r25, 0x0145
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	82 3e       	cpi	r24, 0xE2	; 226
    1020:	92 07       	cpc	r25, r18
    1022:	1c f4       	brge	.+6      	; 0x102a <setup+0x34a>
				Config.PitchGyroDirection = GYRO_NORMAL;
    1024:	10 92 63 01 	sts	0x0163, r1
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <setup+0x372>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInPitch > 30) { // reverse(down)
    102a:	4f 97       	sbiw	r24, 0x1f	; 31
    102c:	1c f0       	brlt	.+6      	; 0x1034 <setup+0x354>
				Config.PitchGyroDirection = GYRO_REVERSED;
    102e:	10 93 63 01 	sts	0x0163, r17
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <setup+0x372>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw < -30) { // normal(left)
    1034:	80 91 2c 01 	lds	r24, 0x012C
    1038:	90 91 2d 01 	lds	r25, 0x012D
    103c:	2f ef       	ldi	r18, 0xFF	; 255
    103e:	82 3e       	cpi	r24, 0xE2	; 226
    1040:	92 07       	cpc	r25, r18
    1042:	1c f4       	brge	.+6      	; 0x104a <setup+0x36a>
				Config.YawGyroDirection = GYRO_NORMAL;
    1044:	10 92 64 01 	sts	0x0164, r1
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <setup+0x372>
				Save_Config_to_EEPROM();
				LED = 1;
			} else if (RxInYaw > 30) { // reverse(right)
    104a:	4f 97       	sbiw	r24, 0x1f	; 31
    104c:	2c f0       	brlt	.+10     	; 0x1058 <setup+0x378>
				Config.YawGyroDirection = GYRO_REVERSED;
    104e:	10 93 64 01 	sts	0x0164, r17
				Save_Config_to_EEPROM();
    1052:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Save_Config_to_EEPROM>
				LED = 1;
    1056:	2e 9a       	sbi	0x05, 6	; 5
			}
	
			delay_ms(50);
    1058:	82 e3       	ldi	r24, 0x32	; 50
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			LED = 0;
    1060:	2e 98       	cbi	0x05, 6	; 5
    1062:	c1 cf       	rjmp	.-126    	; 0xfe6 <setup+0x306>

		}
	}

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
    1064:	80 91 4d 01 	lds	r24, 0x014D
    1068:	90 91 4e 01 	lds	r25, 0x014E
    106c:	c3 97       	sbiw	r24, 0x33	; 51
    106e:	f0 f5       	brcc	.+124    	; 0x10ec <setup+0x40c>
    1070:	c0 e0       	ldi	r28, 0x00	; 0
    1072:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
		{
			LED = 1;
    1074:	2e 9a       	sbi	0x05, 6	; 5
			delay_ms(25);
    1076:	89 e1       	ldi	r24, 0x19	; 25
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>
			LED = 0;
    107e:	2e 98       	cbi	0x05, 6	; 5
			delay_ms(25);
    1080:	89 e1       	ldi	r24, 0x19	; 25
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 2a 04 	call	0x854	; 0x854 <delay_ms>

	// ESC throttle calibration
	if (GainInADC[YAW] < (UC_ADC_MAX*5)/100)		// less than 5%
	{
		// flash LED 3 times
		for (i=0;i<3;i++)
    1088:	21 96       	adiw	r28, 0x01	; 1
    108a:	c3 30       	cpi	r28, 0x03	; 3
    108c:	d1 05       	cpc	r29, r1
    108e:	91 f7       	brne	.-28     	; 0x1074 <setup+0x394>
			delay_ms(25);
			LED = 0;
			delay_ms(25);
		}

		Armed = true;	// override so that output_motor_pwm() won't quit early
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 46 01 	sts	0x0146, r24
		PWM_Low_Pulse_Interval = ((1000000UL / 50) - 2000)/10;	// set to 50Hz
    1096:	88 e0       	ldi	r24, 0x08	; 8
    1098:	97 e0       	ldi	r25, 0x07	; 7
    109a:	90 93 01 01 	sts	0x0101, r25
    109e:	80 93 00 01 	sts	0x0100, r24
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE) || defined(DUAL_COPTER) || defined(TWIN_COPTER) || defined(TRI_COPTER)
		ServoPPMRateDivider = 1;	// since we have already set to 50Hz
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 03 01 	sts	0x0103, r25
    10aa:	80 93 02 01 	sts	0x0102, r24
		while (1)	// loop forever
		{
			RxGetChannels();
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
			MotorOut1 = RxInCollective;
			MotorOut2 = 140;		// Center: 140
    10ae:	cc e8       	ldi	r28, 0x8C	; 140
    10b0:	d0 e0       	ldi	r29, 0x00	; 0
		ServoPPMRateDivider = 1;	// since we have already set to 50Hz
#endif
		
		while (1)	// loop forever
		{
			RxGetChannels();
    10b2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <RxGetChannels>
#if defined(SINGLE_COPTER) || defined(SINGLE_AIRPLANE)
			MotorOut1 = RxInCollective;
    10b6:	80 91 1b 01 	lds	r24, 0x011B
    10ba:	90 91 1c 01 	lds	r25, 0x011C
    10be:	90 93 24 01 	sts	0x0124, r25
    10c2:	80 93 23 01 	sts	0x0123, r24
			MotorOut2 = 140;		// Center: 140
    10c6:	d0 93 2f 01 	sts	0x012F, r29
    10ca:	c0 93 2e 01 	sts	0x012E, r28
			MotorOut3 = 140;
    10ce:	d0 93 41 01 	sts	0x0141, r29
    10d2:	c0 93 40 01 	sts	0x0140, r28
			MotorOut4 = 140;
    10d6:	d0 93 35 01 	sts	0x0135, r29
    10da:	c0 93 34 01 	sts	0x0134, r28
			MotorOut5 = 140;
    10de:	d0 93 5c 01 	sts	0x015C, r29
    10e2:	c0 93 5b 01 	sts	0x015B, r28
			MotorOut6 = RxInCollective;
#else
#error No Copter configuration defined !!!!
#endif

			output_motor_ppm();	// this regulates rate at which we output signals
    10e6:	0e 94 df 02 	call	0x5be	; 0x5be <output_motor_ppm>
    10ea:	e3 cf       	rjmp	.-58     	; 0x10b2 <setup+0x3d2>
		}
	}
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	08 95       	ret

000010fe <main>:
}


int main(void)
{
	setup();
    10fe:	0e 94 70 06 	call	0xce0	; 0xce0 <setup>

	while (1)
	{
		loop();
    1102:	0e 94 3d 04 	call	0x87a	; 0x87a <loop>
    1106:	fd cf       	rjmp	.-6      	; 0x1102 <main+0x4>

00001108 <__udivmodhi4>:
    1108:	aa 1b       	sub	r26, r26
    110a:	bb 1b       	sub	r27, r27
    110c:	51 e1       	ldi	r21, 0x11	; 17
    110e:	07 c0       	rjmp	.+14     	; 0x111e <__udivmodhi4_ep>

00001110 <__udivmodhi4_loop>:
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	a6 17       	cp	r26, r22
    1116:	b7 07       	cpc	r27, r23
    1118:	10 f0       	brcs	.+4      	; 0x111e <__udivmodhi4_ep>
    111a:	a6 1b       	sub	r26, r22
    111c:	b7 0b       	sbc	r27, r23

0000111e <__udivmodhi4_ep>:
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	5a 95       	dec	r21
    1124:	a9 f7       	brne	.-22     	; 0x1110 <__udivmodhi4_loop>
    1126:	80 95       	com	r24
    1128:	90 95       	com	r25
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	08 95       	ret

00001130 <__divmodhi4>:
    1130:	97 fb       	bst	r25, 7
    1132:	09 2e       	mov	r0, r25
    1134:	07 26       	eor	r0, r23
    1136:	0a d0       	rcall	.+20     	; 0x114c <__divmodhi4_neg1>
    1138:	77 fd       	sbrc	r23, 7
    113a:	04 d0       	rcall	.+8      	; 0x1144 <__divmodhi4_neg2>
    113c:	e5 df       	rcall	.-54     	; 0x1108 <__udivmodhi4>
    113e:	06 d0       	rcall	.+12     	; 0x114c <__divmodhi4_neg1>
    1140:	00 20       	and	r0, r0
    1142:	1a f4       	brpl	.+6      	; 0x114a <__divmodhi4_exit>

00001144 <__divmodhi4_neg2>:
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255

0000114a <__divmodhi4_exit>:
    114a:	08 95       	ret

0000114c <__divmodhi4_neg1>:
    114c:	f6 f7       	brtc	.-4      	; 0x114a <__divmodhi4_exit>
    114e:	90 95       	com	r25
    1150:	81 95       	neg	r24
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	08 95       	ret

00001156 <__eerd_block_m328p>:
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22

0000115a <__eerd_blraw_m328p>:
    115a:	fc 01       	movw	r30, r24
    115c:	f9 99       	sbic	0x1f, 1	; 31
    115e:	fe cf       	rjmp	.-4      	; 0x115c <__eerd_blraw_m328p+0x2>
    1160:	06 c0       	rjmp	.+12     	; 0x116e <__eerd_blraw_m328p+0x14>
    1162:	f2 bd       	out	0x22, r31	; 34
    1164:	e1 bd       	out	0x21, r30	; 33
    1166:	f8 9a       	sbi	0x1f, 0	; 31
    1168:	31 96       	adiw	r30, 0x01	; 1
    116a:	00 b4       	in	r0, 0x20	; 32
    116c:	0d 92       	st	X+, r0
    116e:	41 50       	subi	r20, 0x01	; 1
    1170:	50 40       	sbci	r21, 0x00	; 0
    1172:	b8 f7       	brcc	.-18     	; 0x1162 <__eerd_blraw_m328p+0x8>
    1174:	08 95       	ret

00001176 <__eerd_byte_m328p>:
    1176:	f9 99       	sbic	0x1f, 1	; 31
    1178:	fe cf       	rjmp	.-4      	; 0x1176 <__eerd_byte_m328p>
    117a:	92 bd       	out	0x22, r25	; 34
    117c:	81 bd       	out	0x21, r24	; 33
    117e:	f8 9a       	sbi	0x1f, 0	; 31
    1180:	99 27       	eor	r25, r25
    1182:	80 b5       	in	r24, 0x20	; 32
    1184:	08 95       	ret

00001186 <__eewr_byte_m328p>:
    1186:	26 2f       	mov	r18, r22

00001188 <__eewr_r18_m328p>:
    1188:	f9 99       	sbic	0x1f, 1	; 31
    118a:	fe cf       	rjmp	.-4      	; 0x1188 <__eewr_r18_m328p>
    118c:	1f ba       	out	0x1f, r1	; 31
    118e:	92 bd       	out	0x22, r25	; 34
    1190:	81 bd       	out	0x21, r24	; 33
    1192:	20 bd       	out	0x20, r18	; 32
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	fa 9a       	sbi	0x1f, 2	; 31
    119a:	f9 9a       	sbi	0x1f, 1	; 31
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	08 95       	ret

000011a2 <_exit>:
    11a2:	f8 94       	cli

000011a4 <__stop_program>:
    11a4:	ff cf       	rjmp	.-2      	; 0x11a4 <__stop_program>
